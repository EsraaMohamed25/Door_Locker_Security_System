
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000027c2  00002856  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000f6  008000f6  000028ec  2**0
                  ALLOC
  3 .stab         00002568  00000000  00000000  000028ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001247  00000000  00000000  00004e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000609b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000061db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000634b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a019  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3f       	cpi	r26, 0xFB	; 251
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <main>
      8a:	0c 94 df 13 	jmp	0x27be	; 0x27be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ee       	ldi	r26, 0xE1	; 225
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 ee       	ldi	r24, 0xE1	; 225
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6f 13 	jmp	0x26de	; 0x26de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8b 13 	jmp	0x2716	; 0x2716 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_ECU_takePass>:
/* Function to :
 * Take the password from user
 * Send the pass to Control_ECU by UART
 * Display * on the screen
 */
void HMI_ECU_takePass(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	60 97       	sbiw	r28, 0x10	; 16
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for(i=0;i <5 ;i++){
     b5a:	1f 86       	std	Y+15, r1	; 0x0f
     b5c:	8a c0       	rjmp	.+276    	; 0xc72 <HMI_ECU_takePass+0x12c>

		/* get & send the pressed button from keypad */
		key = KEYPAD_getPressedKey();
     b5e:	0e 94 84 09 	call	0x1308	; 0x1308 <KEYPAD_getPressedKey>
     b62:	80 93 f6 00 	sts	0x00F6, r24
		/* Check if the user finish entering the pass or no */
		if( key >=0 && key <=9){
     b66:	80 91 f6 00 	lds	r24, 0x00F6
     b6a:	80 91 f6 00 	lds	r24, 0x00F6
     b6e:	8a 30       	cpi	r24, 0x0A	; 10
     b70:	40 f4       	brcc	.+16     	; 0xb82 <HMI_ECU_takePass+0x3c>
			UART_sendByte(key);
     b72:	80 91 f6 00 	lds	r24, 0x00F6
     b76:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
			/*Display * for each char of pass */
			LCD_displayCharacter('*');
     b7a:	8a e2       	ldi	r24, 0x2A	; 42
     b7c:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_displayCharacter>
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <HMI_ECU_takePass+0x42>
//			LCD_intgerToString(key);
		}
		else
			i--;
     b82:	8f 85       	ldd	r24, Y+15	; 0x0f
     b84:	81 50       	subi	r24, 0x01	; 1
     b86:	8f 87       	std	Y+15, r24	; 0x0f
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	aa ef       	ldi	r26, 0xFA	; 250
     b8e:	b3 e4       	ldi	r27, 0x43	; 67
     b90:	8b 87       	std	Y+11, r24	; 0x0b
     b92:	9c 87       	std	Y+12, r25	; 0x0c
     b94:	ad 87       	std	Y+13, r26	; 0x0d
     b96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b98:	6b 85       	ldd	r22, Y+11	; 0x0b
     b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	4a e7       	ldi	r20, 0x7A	; 122
     ba6:	53 e4       	ldi	r21, 0x43	; 67
     ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	8f 83       	std	Y+7, r24	; 0x07
     bb2:	98 87       	std	Y+8, r25	; 0x08
     bb4:	a9 87       	std	Y+9, r26	; 0x09
     bb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb8:	6f 81       	ldd	r22, Y+7	; 0x07
     bba:	78 85       	ldd	r23, Y+8	; 0x08
     bbc:	89 85       	ldd	r24, Y+9	; 0x09
     bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e8       	ldi	r20, 0x80	; 128
     bc6:	5f e3       	ldi	r21, 0x3F	; 63
     bc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bcc:	88 23       	and	r24, r24
     bce:	2c f4       	brge	.+10     	; 0xbda <HMI_ECU_takePass+0x94>
		__ticks = 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	9e 83       	std	Y+6, r25	; 0x06
     bd6:	8d 83       	std	Y+5, r24	; 0x05
     bd8:	3f c0       	rjmp	.+126    	; 0xc58 <HMI_ECU_takePass+0x112>
	else if (__tmp > 65535)
     bda:	6f 81       	ldd	r22, Y+7	; 0x07
     bdc:	78 85       	ldd	r23, Y+8	; 0x08
     bde:	89 85       	ldd	r24, Y+9	; 0x09
     be0:	9a 85       	ldd	r25, Y+10	; 0x0a
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	3f ef       	ldi	r19, 0xFF	; 255
     be6:	4f e7       	ldi	r20, 0x7F	; 127
     be8:	57 e4       	ldi	r21, 0x47	; 71
     bea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bee:	18 16       	cp	r1, r24
     bf0:	4c f5       	brge	.+82     	; 0xc44 <HMI_ECU_takePass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
     bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	40 e2       	ldi	r20, 0x20	; 32
     c00:	51 e4       	ldi	r21, 0x41	; 65
     c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	bc 01       	movw	r22, r24
     c0c:	cd 01       	movw	r24, r26
     c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	9e 83       	std	Y+6, r25	; 0x06
     c18:	8d 83       	std	Y+5, r24	; 0x05
     c1a:	0f c0       	rjmp	.+30     	; 0xc3a <HMI_ECU_takePass+0xf4>
     c1c:	89 e1       	ldi	r24, 0x19	; 25
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9c 83       	std	Y+4, r25	; 0x04
     c22:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <HMI_ECU_takePass+0xe2>
     c2c:	9c 83       	std	Y+4, r25	; 0x04
     c2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c30:	8d 81       	ldd	r24, Y+5	; 0x05
     c32:	9e 81       	ldd	r25, Y+6	; 0x06
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	9e 83       	std	Y+6, r25	; 0x06
     c38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3a:	8d 81       	ldd	r24, Y+5	; 0x05
     c3c:	9e 81       	ldd	r25, Y+6	; 0x06
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	69 f7       	brne	.-38     	; 0xc1c <HMI_ECU_takePass+0xd6>
     c42:	14 c0       	rjmp	.+40     	; 0xc6c <HMI_ECU_takePass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c44:	6f 81       	ldd	r22, Y+7	; 0x07
     c46:	78 85       	ldd	r23, Y+8	; 0x08
     c48:	89 85       	ldd	r24, Y+9	; 0x09
     c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	9e 83       	std	Y+6, r25	; 0x06
     c56:	8d 83       	std	Y+5, r24	; 0x05
     c58:	8d 81       	ldd	r24, Y+5	; 0x05
     c5a:	9e 81       	ldd	r25, Y+6	; 0x06
     c5c:	9a 83       	std	Y+2, r25	; 0x02
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <HMI_ECU_takePass+0x11e>
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
 * Send the pass to Control_ECU by UART
 * Display * on the screen
 */
void HMI_ECU_takePass(void){
	uint8 i;
	for(i=0;i <5 ;i++){
     c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	8f 87       	std	Y+15, r24	; 0x0f
     c72:	8f 85       	ldd	r24, Y+15	; 0x0f
     c74:	85 30       	cpi	r24, 0x05	; 5
     c76:	08 f4       	brcc	.+2      	; 0xc7a <HMI_ECU_takePass+0x134>
     c78:	72 cf       	rjmp	.-284    	; 0xb5e <HMI_ECU_takePass+0x18>
			i--;
		/* Press time */
		_delay_ms(500);
	}
	return;
}
     c7a:	60 96       	adiw	r28, 0x10	; 16
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	00 d0       	rcall	.+0      	; 0xc92 <GPIO_setupPinDirection+0x6>
     c92:	00 d0       	rcall	.+0      	; 0xc94 <GPIO_setupPinDirection+0x8>
     c94:	0f 92       	push	r0
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	6a 83       	std	Y+2, r22	; 0x02
     c9e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	88 30       	cpi	r24, 0x08	; 8
     ca4:	08 f0       	brcs	.+2      	; 0xca8 <GPIO_setupPinDirection+0x1c>
     ca6:	d5 c0       	rjmp	.+426    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	08 f0       	brcs	.+2      	; 0xcb0 <GPIO_setupPinDirection+0x24>
     cae:	d1 c0       	rjmp	.+418    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	3d 83       	std	Y+5, r19	; 0x05
     cb8:	2c 83       	std	Y+4, r18	; 0x04
     cba:	8c 81       	ldd	r24, Y+4	; 0x04
     cbc:	9d 81       	ldd	r25, Y+5	; 0x05
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <GPIO_setupPinDirection+0x3a>
     cc4:	43 c0       	rjmp	.+134    	; 0xd4c <GPIO_setupPinDirection+0xc0>
     cc6:	2c 81       	ldd	r18, Y+4	; 0x04
     cc8:	3d 81       	ldd	r19, Y+5	; 0x05
     cca:	22 30       	cpi	r18, 0x02	; 2
     ccc:	31 05       	cpc	r19, r1
     cce:	2c f4       	brge	.+10     	; 0xcda <GPIO_setupPinDirection+0x4e>
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	9d 81       	ldd	r25, Y+5	; 0x05
     cd4:	00 97       	sbiw	r24, 0x00	; 0
     cd6:	71 f0       	breq	.+28     	; 0xcf4 <GPIO_setupPinDirection+0x68>
     cd8:	bc c0       	rjmp	.+376    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
     cda:	2c 81       	ldd	r18, Y+4	; 0x04
     cdc:	3d 81       	ldd	r19, Y+5	; 0x05
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <GPIO_setupPinDirection+0x5a>
     ce4:	5f c0       	rjmp	.+190    	; 0xda4 <GPIO_setupPinDirection+0x118>
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	9d 81       	ldd	r25, Y+5	; 0x05
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	91 05       	cpc	r25, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <GPIO_setupPinDirection+0x66>
     cf0:	85 c0       	rjmp	.+266    	; 0xdfc <GPIO_setupPinDirection+0x170>
     cf2:	af c0       	rjmp	.+350    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	a1 f4       	brne	.+40     	; 0xd22 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     cfa:	aa e3       	ldi	r26, 0x3A	; 58
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ea e3       	ldi	r30, 0x3A	; 58
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	28 2f       	mov	r18, r24
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	02 2e       	mov	r0, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <GPIO_setupPinDirection+0x8c>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	0a 94       	dec	r0
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <GPIO_setupPinDirection+0x88>
     d1c:	84 2b       	or	r24, r20
     d1e:	8c 93       	st	X, r24
     d20:	98 c0       	rjmp	.+304    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d22:	aa e3       	ldi	r26, 0x3A	; 58
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	ea e3       	ldi	r30, 0x3A	; 58
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	48 2f       	mov	r20, r24
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 2e       	mov	r0, r18
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <GPIO_setupPinDirection+0xb4>
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <GPIO_setupPinDirection+0xb0>
     d44:	80 95       	com	r24
     d46:	84 23       	and	r24, r20
     d48:	8c 93       	st	X, r24
     d4a:	83 c0       	rjmp	.+262    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	a1 f4       	brne	.+40     	; 0xd7a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     d52:	a7 e3       	ldi	r26, 0x37	; 55
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e7 e3       	ldi	r30, 0x37	; 55
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <GPIO_setupPinDirection+0xe4>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <GPIO_setupPinDirection+0xe0>
     d74:	84 2b       	or	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	6c c0       	rjmp	.+216    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d7a:	a7 e3       	ldi	r26, 0x37	; 55
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e7 e3       	ldi	r30, 0x37	; 55
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_setupPinDirection+0x10c>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_setupPinDirection+0x108>
     d9c:	80 95       	com	r24
     d9e:	84 23       	and	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	57 c0       	rjmp	.+174    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	a1 f4       	brne	.+40     	; 0xdd2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     daa:	a4 e3       	ldi	r26, 0x34	; 52
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e4 e3       	ldi	r30, 0x34	; 52
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <GPIO_setupPinDirection+0x13c>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <GPIO_setupPinDirection+0x138>
     dcc:	84 2b       	or	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	40 c0       	rjmp	.+128    	; 0xe52 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     dd2:	a4 e3       	ldi	r26, 0x34	; 52
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e4 e3       	ldi	r30, 0x34	; 52
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_setupPinDirection+0x164>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_setupPinDirection+0x160>
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	2b c0       	rjmp	.+86     	; 0xe52 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	a1 f4       	brne	.+40     	; 0xe2a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e02:	a1 e3       	ldi	r26, 0x31	; 49
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e1 e3       	ldi	r30, 0x31	; 49
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <GPIO_setupPinDirection+0x194>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <GPIO_setupPinDirection+0x190>
     e24:	84 2b       	or	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	14 c0       	rjmp	.+40     	; 0xe52 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e2a:	a1 e3       	ldi	r26, 0x31	; 49
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e1 e3       	ldi	r30, 0x31	; 49
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_setupPinDirection+0x1bc>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_setupPinDirection+0x1b8>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	00 d0       	rcall	.+0      	; 0xe68 <GPIO_writePin+0x6>
     e68:	00 d0       	rcall	.+0      	; 0xe6a <GPIO_writePin+0x8>
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
     e72:	6a 83       	std	Y+2, r22	; 0x02
     e74:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e76:	8a 81       	ldd	r24, Y+2	; 0x02
     e78:	88 30       	cpi	r24, 0x08	; 8
     e7a:	08 f0       	brcs	.+2      	; 0xe7e <GPIO_writePin+0x1c>
     e7c:	d5 c0       	rjmp	.+426    	; 0x1028 <GPIO_writePin+0x1c6>
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	08 f0       	brcs	.+2      	; 0xe86 <GPIO_writePin+0x24>
     e84:	d1 c0       	rjmp	.+418    	; 0x1028 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	3d 83       	std	Y+5, r19	; 0x05
     e8e:	2c 83       	std	Y+4, r18	; 0x04
     e90:	8c 81       	ldd	r24, Y+4	; 0x04
     e92:	9d 81       	ldd	r25, Y+5	; 0x05
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <GPIO_writePin+0x3a>
     e9a:	43 c0       	rjmp	.+134    	; 0xf22 <GPIO_writePin+0xc0>
     e9c:	2c 81       	ldd	r18, Y+4	; 0x04
     e9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	2c f4       	brge	.+10     	; 0xeb0 <GPIO_writePin+0x4e>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	9d 81       	ldd	r25, Y+5	; 0x05
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	71 f0       	breq	.+28     	; 0xeca <GPIO_writePin+0x68>
     eae:	bc c0       	rjmp	.+376    	; 0x1028 <GPIO_writePin+0x1c6>
     eb0:	2c 81       	ldd	r18, Y+4	; 0x04
     eb2:	3d 81       	ldd	r19, Y+5	; 0x05
     eb4:	22 30       	cpi	r18, 0x02	; 2
     eb6:	31 05       	cpc	r19, r1
     eb8:	09 f4       	brne	.+2      	; 0xebc <GPIO_writePin+0x5a>
     eba:	5f c0       	rjmp	.+190    	; 0xf7a <GPIO_writePin+0x118>
     ebc:	8c 81       	ldd	r24, Y+4	; 0x04
     ebe:	9d 81       	ldd	r25, Y+5	; 0x05
     ec0:	83 30       	cpi	r24, 0x03	; 3
     ec2:	91 05       	cpc	r25, r1
     ec4:	09 f4       	brne	.+2      	; 0xec8 <GPIO_writePin+0x66>
     ec6:	85 c0       	rjmp	.+266    	; 0xfd2 <GPIO_writePin+0x170>
     ec8:	af c0       	rjmp	.+350    	; 0x1028 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	81 30       	cpi	r24, 0x01	; 1
     ece:	a1 f4       	brne	.+40     	; 0xef8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     ed0:	ab e3       	ldi	r26, 0x3B	; 59
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	eb e3       	ldi	r30, 0x3B	; 59
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	48 2f       	mov	r20, r24
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	28 2f       	mov	r18, r24
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 2e       	mov	r0, r18
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <GPIO_writePin+0x8c>
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	0a 94       	dec	r0
     ef0:	e2 f7       	brpl	.-8      	; 0xeea <GPIO_writePin+0x88>
     ef2:	84 2b       	or	r24, r20
     ef4:	8c 93       	st	X, r24
     ef6:	98 c0       	rjmp	.+304    	; 0x1028 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     ef8:	ab e3       	ldi	r26, 0x3B	; 59
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	eb e3       	ldi	r30, 0x3B	; 59
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO_writePin+0xb4>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <GPIO_writePin+0xb0>
     f1a:	80 95       	com	r24
     f1c:	84 23       	and	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	83 c0       	rjmp	.+262    	; 0x1028 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	a1 f4       	brne	.+40     	; 0xf50 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f28:	a8 e3       	ldi	r26, 0x38	; 56
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e8 e3       	ldi	r30, 0x38	; 56
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_writePin+0xe4>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_writePin+0xe0>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	6c c0       	rjmp	.+216    	; 0x1028 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     f50:	a8 e3       	ldi	r26, 0x38	; 56
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e3       	ldi	r30, 0x38	; 56
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_writePin+0x10c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_writePin+0x108>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	57 c0       	rjmp	.+174    	; 0x1028 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	a1 f4       	brne	.+40     	; 0xfa8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f80:	a5 e3       	ldi	r26, 0x35	; 53
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e5 e3       	ldi	r30, 0x35	; 53
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_writePin+0x13c>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_writePin+0x138>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	40 c0       	rjmp	.+128    	; 0x1028 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     fa8:	a5 e3       	ldi	r26, 0x35	; 53
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e3       	ldi	r30, 0x35	; 53
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <GPIO_writePin+0x164>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <GPIO_writePin+0x160>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	2b c0       	rjmp	.+86     	; 0x1028 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	a1 f4       	brne	.+40     	; 0x1000 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     fd8:	a2 e3       	ldi	r26, 0x32	; 50
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e2 e3       	ldi	r30, 0x32	; 50
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <GPIO_writePin+0x194>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <GPIO_writePin+0x190>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	14 c0       	rjmp	.+40     	; 0x1028 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1000:	a2 e3       	ldi	r26, 0x32	; 50
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e2 e3       	ldi	r30, 0x32	; 50
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_writePin+0x1bc>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_writePin+0x1b8>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <GPIO_readPin+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <GPIO_readPin+0x8>
    1040:	0f 92       	push	r0
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	8a 83       	std	Y+2, r24	; 0x02
    1048:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    104a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	08 f0       	brcs	.+2      	; 0x1054 <GPIO_readPin+0x1c>
    1052:	84 c0       	rjmp	.+264    	; 0x115c <GPIO_readPin+0x124>
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	08 f0       	brcs	.+2      	; 0x105c <GPIO_readPin+0x24>
    105a:	80 c0       	rjmp	.+256    	; 0x115c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3d 83       	std	Y+5, r19	; 0x05
    1064:	2c 83       	std	Y+4, r18	; 0x04
    1066:	4c 81       	ldd	r20, Y+4	; 0x04
    1068:	5d 81       	ldd	r21, Y+5	; 0x05
    106a:	41 30       	cpi	r20, 0x01	; 1
    106c:	51 05       	cpc	r21, r1
    106e:	79 f1       	breq	.+94     	; 0x10ce <GPIO_readPin+0x96>
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	91 05       	cpc	r25, r1
    1078:	34 f4       	brge	.+12     	; 0x1086 <GPIO_readPin+0x4e>
    107a:	2c 81       	ldd	r18, Y+4	; 0x04
    107c:	3d 81       	ldd	r19, Y+5	; 0x05
    107e:	21 15       	cp	r18, r1
    1080:	31 05       	cpc	r19, r1
    1082:	69 f0       	breq	.+26     	; 0x109e <GPIO_readPin+0x66>
    1084:	6b c0       	rjmp	.+214    	; 0x115c <GPIO_readPin+0x124>
    1086:	4c 81       	ldd	r20, Y+4	; 0x04
    1088:	5d 81       	ldd	r21, Y+5	; 0x05
    108a:	42 30       	cpi	r20, 0x02	; 2
    108c:	51 05       	cpc	r21, r1
    108e:	b9 f1       	breq	.+110    	; 0x10fe <GPIO_readPin+0xc6>
    1090:	8c 81       	ldd	r24, Y+4	; 0x04
    1092:	9d 81       	ldd	r25, Y+5	; 0x05
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <GPIO_readPin+0x64>
    109a:	49 c0       	rjmp	.+146    	; 0x112e <GPIO_readPin+0xf6>
    109c:	5f c0       	rjmp	.+190    	; 0x115c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    109e:	e9 e3       	ldi	r30, 0x39	; 57
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <GPIO_readPin+0x7e>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <GPIO_readPin+0x7a>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	88 23       	and	r24, r24
    10c2:	19 f0       	breq	.+6      	; 0x10ca <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	49 c0       	rjmp	.+146    	; 0x115c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10ca:	19 82       	std	Y+1, r1	; 0x01
    10cc:	47 c0       	rjmp	.+142    	; 0x115c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    10ce:	e6 e3       	ldi	r30, 0x36	; 54
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <GPIO_readPin+0xae>
    10e2:	55 95       	asr	r21
    10e4:	47 95       	ror	r20
    10e6:	8a 95       	dec	r24
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <GPIO_readPin+0xaa>
    10ea:	ca 01       	movw	r24, r20
    10ec:	81 70       	andi	r24, 0x01	; 1
    10ee:	90 70       	andi	r25, 0x00	; 0
    10f0:	88 23       	and	r24, r24
    10f2:	19 f0       	breq	.+6      	; 0x10fa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	31 c0       	rjmp	.+98     	; 0x115c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10fa:	19 82       	std	Y+1, r1	; 0x01
    10fc:	2f c0       	rjmp	.+94     	; 0x115c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    10fe:	e3 e3       	ldi	r30, 0x33	; 51
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <GPIO_readPin+0xde>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <GPIO_readPin+0xda>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	88 23       	and	r24, r24
    1122:	19 f0       	breq	.+6      	; 0x112a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	19 c0       	rjmp	.+50     	; 0x115c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    112a:	19 82       	std	Y+1, r1	; 0x01
    112c:	17 c0       	rjmp	.+46     	; 0x115c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    112e:	e0 e3       	ldi	r30, 0x30	; 48
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a9 01       	movw	r20, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <GPIO_readPin+0x10e>
    1142:	55 95       	asr	r21
    1144:	47 95       	ror	r20
    1146:	8a 95       	dec	r24
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <GPIO_readPin+0x10a>
    114a:	ca 01       	movw	r24, r20
    114c:	81 70       	andi	r24, 0x01	; 1
    114e:	90 70       	andi	r25, 0x00	; 0
    1150:	88 23       	and	r24, r24
    1152:	19 f0       	breq	.+6      	; 0x115a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	01 c0       	rjmp	.+2      	; 0x115c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    115a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <GPIO_setupPortDirection+0x6>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <GPIO_setupPortDirection+0x8>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	89 83       	std	Y+1, r24	; 0x01
    117c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	84 30       	cpi	r24, 0x04	; 4
    1182:	90 f5       	brcc	.+100    	; 0x11e8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3c 83       	std	Y+4, r19	; 0x04
    118c:	2b 83       	std	Y+3, r18	; 0x03
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	81 30       	cpi	r24, 0x01	; 1
    1194:	91 05       	cpc	r25, r1
    1196:	d1 f0       	breq	.+52     	; 0x11cc <GPIO_setupPortDirection+0x5e>
    1198:	2b 81       	ldd	r18, Y+3	; 0x03
    119a:	3c 81       	ldd	r19, Y+4	; 0x04
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	2c f4       	brge	.+10     	; 0x11ac <GPIO_setupPortDirection+0x3e>
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	00 97       	sbiw	r24, 0x00	; 0
    11a8:	61 f0       	breq	.+24     	; 0x11c2 <GPIO_setupPortDirection+0x54>
    11aa:	1e c0       	rjmp	.+60     	; 0x11e8 <GPIO_setupPortDirection+0x7a>
    11ac:	2b 81       	ldd	r18, Y+3	; 0x03
    11ae:	3c 81       	ldd	r19, Y+4	; 0x04
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	81 f0       	breq	.+32     	; 0x11d6 <GPIO_setupPortDirection+0x68>
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	83 30       	cpi	r24, 0x03	; 3
    11bc:	91 05       	cpc	r25, r1
    11be:	81 f0       	breq	.+32     	; 0x11e0 <GPIO_setupPortDirection+0x72>
    11c0:	13 c0       	rjmp	.+38     	; 0x11e8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    11c2:	ea e3       	ldi	r30, 0x3A	; 58
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 83       	st	Z, r24
    11ca:	0e c0       	rjmp	.+28     	; 0x11e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    11cc:	e7 e3       	ldi	r30, 0x37	; 55
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	80 83       	st	Z, r24
    11d4:	09 c0       	rjmp	.+18     	; 0x11e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    11d6:	e4 e3       	ldi	r30, 0x34	; 52
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	80 83       	st	Z, r24
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    11e0:	e1 e3       	ldi	r30, 0x31	; 49
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	80 83       	st	Z, r24
			break;
		}
	}
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <GPIO_writePort+0x6>
    11fc:	00 d0       	rcall	.+0      	; 0x11fe <GPIO_writePort+0x8>
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	84 30       	cpi	r24, 0x04	; 4
    120a:	90 f5       	brcc	.+100    	; 0x1270 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3c 83       	std	Y+4, r19	; 0x04
    1214:	2b 83       	std	Y+3, r18	; 0x03
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	91 05       	cpc	r25, r1
    121e:	d1 f0       	breq	.+52     	; 0x1254 <GPIO_writePort+0x5e>
    1220:	2b 81       	ldd	r18, Y+3	; 0x03
    1222:	3c 81       	ldd	r19, Y+4	; 0x04
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <GPIO_writePort+0x3e>
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	61 f0       	breq	.+24     	; 0x124a <GPIO_writePort+0x54>
    1232:	1e c0       	rjmp	.+60     	; 0x1270 <GPIO_writePort+0x7a>
    1234:	2b 81       	ldd	r18, Y+3	; 0x03
    1236:	3c 81       	ldd	r19, Y+4	; 0x04
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	81 f0       	breq	.+32     	; 0x125e <GPIO_writePort+0x68>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	81 f0       	breq	.+32     	; 0x1268 <GPIO_writePort+0x72>
    1248:	13 c0       	rjmp	.+38     	; 0x1270 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	80 83       	st	Z, r24
    1252:	0e c0       	rjmp	.+28     	; 0x1270 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1254:	e8 e3       	ldi	r30, 0x38	; 56
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	80 83       	st	Z, r24
    125c:	09 c0       	rjmp	.+18     	; 0x1270 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    125e:	e5 e3       	ldi	r30, 0x35	; 53
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	04 c0       	rjmp	.+8      	; 0x1270 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1268:	e2 e3       	ldi	r30, 0x32	; 50
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	00 d0       	rcall	.+0      	; 0x1284 <GPIO_readPort+0x6>
    1284:	00 d0       	rcall	.+0      	; 0x1286 <GPIO_readPort+0x8>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    128c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	90 f5       	brcc	.+100    	; 0x12f8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	3c 83       	std	Y+4, r19	; 0x04
    129c:	2b 83       	std	Y+3, r18	; 0x03
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	81 30       	cpi	r24, 0x01	; 1
    12a4:	91 05       	cpc	r25, r1
    12a6:	d1 f0       	breq	.+52     	; 0x12dc <GPIO_readPort+0x5e>
    12a8:	2b 81       	ldd	r18, Y+3	; 0x03
    12aa:	3c 81       	ldd	r19, Y+4	; 0x04
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	2c f4       	brge	.+10     	; 0x12bc <GPIO_readPort+0x3e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	61 f0       	breq	.+24     	; 0x12d2 <GPIO_readPort+0x54>
    12ba:	1e c0       	rjmp	.+60     	; 0x12f8 <GPIO_readPort+0x7a>
    12bc:	2b 81       	ldd	r18, Y+3	; 0x03
    12be:	3c 81       	ldd	r19, Y+4	; 0x04
    12c0:	22 30       	cpi	r18, 0x02	; 2
    12c2:	31 05       	cpc	r19, r1
    12c4:	81 f0       	breq	.+32     	; 0x12e6 <GPIO_readPort+0x68>
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	83 30       	cpi	r24, 0x03	; 3
    12cc:	91 05       	cpc	r25, r1
    12ce:	81 f0       	breq	.+32     	; 0x12f0 <GPIO_readPort+0x72>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    12d2:	e9 e3       	ldi	r30, 0x39	; 57
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	0e c0       	rjmp	.+28     	; 0x12f8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    12dc:	e6 e3       	ldi	r30, 0x36	; 54
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	89 83       	std	Y+1, r24	; 0x01
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    12e6:	e3 e3       	ldi	r30, 0x33	; 51
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    12f0:	e0 e3       	ldi	r30, 0x30	; 48
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <KEYPAD_getPressedKey+0x6>
    130e:	0f 92       	push	r0
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1314:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1316:	1b 82       	std	Y+3, r1	; 0x03
    1318:	43 c0       	rjmp	.+134    	; 0x13a0 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col,PIN_OUTPUT);
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	98 2f       	mov	r25, r24
    1326:	9c 5f       	subi	r25, 0xFC	; 252
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	69 2f       	mov	r22, r25
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	0e 94 46 06 	call	0xc8c	; 0xc8c <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 01       	movw	r18, r24
    133a:	2c 5f       	subi	r18, 0xFC	; 252
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <KEYPAD_getPressedKey+0x40>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	2a 95       	dec	r18
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <KEYPAD_getPressedKey+0x3c>
    134c:	80 95       	com	r24
    134e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	69 81       	ldd	r22, Y+1	; 0x01
    1354:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1358:	1a 82       	std	Y+2, r1	; 0x02
    135a:	1c c0       	rjmp	.+56     	; 0x1394 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	6a 81       	ldd	r22, Y+2	; 0x02
    1360:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_readPin>
    1364:	88 23       	and	r24, r24
    1366:	99 f4       	brne	.+38     	; 0x138e <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	98 2f       	mov	r25, r24
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	89 0f       	add	r24, r25
    137c:	8f 5f       	subi	r24, 0xFF	; 255
    137e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	8f 5f       	subi	r24, 0xFF	; 255
    1392:	8a 83       	std	Y+2, r24	; 0x02
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	84 30       	cpi	r24, 0x04	; 4
    1398:	08 f3       	brcs	.-62     	; 0x135c <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	8b 83       	std	Y+3, r24	; 0x03
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	84 30       	cpi	r24, 0x04	; 4
    13a4:	08 f4       	brcc	.+2      	; 0x13a8 <KEYPAD_getPressedKey+0xa0>
    13a6:	b9 cf       	rjmp	.-142    	; 0x131a <KEYPAD_getPressedKey+0x12>
    13a8:	b6 cf       	rjmp	.-148    	; 0x1316 <KEYPAD_getPressedKey+0xe>

000013aa <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    13aa:	df 93       	push	r29
    13ac:	cf 93       	push	r28
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    13b8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	3c 83       	std	Y+4, r19	; 0x04
    13c2:	2b 83       	std	Y+3, r18	; 0x03
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	88 30       	cpi	r24, 0x08	; 8
    13ca:	91 05       	cpc	r25, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    13ce:	70 c0       	rjmp	.+224    	; 0x14b0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    13d0:	2b 81       	ldd	r18, Y+3	; 0x03
    13d2:	3c 81       	ldd	r19, Y+4	; 0x04
    13d4:	29 30       	cpi	r18, 0x09	; 9
    13d6:	31 05       	cpc	r19, r1
    13d8:	5c f5       	brge	.+86     	; 0x1430 <KEYPAD_4x4_adjustKeyNumber+0x86>
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	84 30       	cpi	r24, 0x04	; 4
    13e0:	91 05       	cpc	r25, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    13e4:	59 c0       	rjmp	.+178    	; 0x1498 <KEYPAD_4x4_adjustKeyNumber+0xee>
    13e6:	2b 81       	ldd	r18, Y+3	; 0x03
    13e8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ea:	25 30       	cpi	r18, 0x05	; 5
    13ec:	31 05       	cpc	r19, r1
    13ee:	9c f4       	brge	.+38     	; 0x1416 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	91 05       	cpc	r25, r1
    13f8:	09 f4       	brne	.+2      	; 0x13fc <KEYPAD_4x4_adjustKeyNumber+0x52>
    13fa:	48 c0       	rjmp	.+144    	; 0x148c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    13fc:	2b 81       	ldd	r18, Y+3	; 0x03
    13fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1400:	23 30       	cpi	r18, 0x03	; 3
    1402:	31 05       	cpc	r19, r1
    1404:	0c f0       	brlt	.+2      	; 0x1408 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1406:	45 c0       	rjmp	.+138    	; 0x1492 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	81 30       	cpi	r24, 0x01	; 1
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1412:	39 c0       	rjmp	.+114    	; 0x1486 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1414:	67 c0       	rjmp	.+206    	; 0x14e4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1416:	2b 81       	ldd	r18, Y+3	; 0x03
    1418:	3c 81       	ldd	r19, Y+4	; 0x04
    141a:	26 30       	cpi	r18, 0x06	; 6
    141c:	31 05       	cpc	r19, r1
    141e:	09 f4       	brne	.+2      	; 0x1422 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1420:	41 c0       	rjmp	.+130    	; 0x14a4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	9c 81       	ldd	r25, Y+4	; 0x04
    1426:	87 30       	cpi	r24, 0x07	; 7
    1428:	91 05       	cpc	r25, r1
    142a:	0c f0       	brlt	.+2      	; 0x142e <KEYPAD_4x4_adjustKeyNumber+0x84>
    142c:	3e c0       	rjmp	.+124    	; 0x14aa <KEYPAD_4x4_adjustKeyNumber+0x100>
    142e:	37 c0       	rjmp	.+110    	; 0x149e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	2c 30       	cpi	r18, 0x0C	; 12
    1436:	31 05       	cpc	r19, r1
    1438:	09 f4       	brne	.+2      	; 0x143c <KEYPAD_4x4_adjustKeyNumber+0x92>
    143a:	46 c0       	rjmp	.+140    	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	8d 30       	cpi	r24, 0x0D	; 13
    1442:	91 05       	cpc	r25, r1
    1444:	5c f4       	brge	.+22     	; 0x145c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	2a 30       	cpi	r18, 0x0A	; 10
    144c:	31 05       	cpc	r19, r1
    144e:	b1 f1       	breq	.+108    	; 0x14bc <KEYPAD_4x4_adjustKeyNumber+0x112>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	8b 30       	cpi	r24, 0x0B	; 11
    1456:	91 05       	cpc	r25, r1
    1458:	a4 f5       	brge	.+104    	; 0x14c2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    145a:	2d c0       	rjmp	.+90     	; 0x14b6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    145c:	2b 81       	ldd	r18, Y+3	; 0x03
    145e:	3c 81       	ldd	r19, Y+4	; 0x04
    1460:	2e 30       	cpi	r18, 0x0E	; 14
    1462:	31 05       	cpc	r19, r1
    1464:	b9 f1       	breq	.+110    	; 0x14d4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	9c 81       	ldd	r25, Y+4	; 0x04
    146a:	8e 30       	cpi	r24, 0x0E	; 14
    146c:	91 05       	cpc	r25, r1
    146e:	7c f1       	brlt	.+94     	; 0x14ce <KEYPAD_4x4_adjustKeyNumber+0x124>
    1470:	2b 81       	ldd	r18, Y+3	; 0x03
    1472:	3c 81       	ldd	r19, Y+4	; 0x04
    1474:	2f 30       	cpi	r18, 0x0F	; 15
    1476:	31 05       	cpc	r19, r1
    1478:	79 f1       	breq	.+94     	; 0x14d8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	80 31       	cpi	r24, 0x10	; 16
    1480:	91 05       	cpc	r25, r1
    1482:	69 f1       	breq	.+90     	; 0x14de <KEYPAD_4x4_adjustKeyNumber+0x134>
    1484:	2f c0       	rjmp	.+94     	; 0x14e4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1486:	87 e0       	ldi	r24, 0x07	; 7
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	2e c0       	rjmp	.+92     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    148c:	88 e0       	ldi	r24, 0x08	; 8
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	2b c0       	rjmp	.+86     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1492:	89 e0       	ldi	r24, 0x09	; 9
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	28 c0       	rjmp	.+80     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1498:	85 e2       	ldi	r24, 0x25	; 37
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	25 c0       	rjmp	.+74     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	22 c0       	rjmp	.+68     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    14a4:	85 e0       	ldi	r24, 0x05	; 5
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	1f c0       	rjmp	.+62     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    14aa:	86 e0       	ldi	r24, 0x06	; 6
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	1c c0       	rjmp	.+56     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    14b0:	8a e2       	ldi	r24, 0x2A	; 42
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	19 c0       	rjmp	.+50     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	16 c0       	rjmp	.+44     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	13 c0       	rjmp	.+38     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    14c2:	83 e0       	ldi	r24, 0x03	; 3
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	10 c0       	rjmp	.+32     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    14c8:	8d e2       	ldi	r24, 0x2D	; 45
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	0d c0       	rjmp	.+26     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    14ce:	8d e0       	ldi	r24, 0x0D	; 13
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	0a c0       	rjmp	.+20     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    14d4:	19 82       	std	Y+1, r1	; 0x01
    14d6:	08 c0       	rjmp	.+16     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    14d8:	8d e3       	ldi	r24, 0x3D	; 61
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	05 c0       	rjmp	.+10     	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    14de:	8b e2       	ldi	r24, 0x2B	; 43
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <LCD_sendCommand>:
/*
 * Description :
 * Send Command to the LCD.
 */

void LCD_sendCommand(uint8 command){
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	e9 97       	sbiw	r28, 0x39	; 57
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RW_PORT,LCD_RW_PIN,LOGIC_LOW);  //Clear RW =0
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	0e 94 31 07 	call	0xe62	; 0xe62 <GPIO_writePin>
	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOGIC_LOW);  //Clear RS =0
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	60 e0       	ldi	r22, 0x00	; 0
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	0e 94 31 07 	call	0xe62	; 0xe62 <GPIO_writePin>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e8       	ldi	r26, 0x80	; 128
    1528:	bf e3       	ldi	r27, 0x3F	; 63
    152a:	8d ab       	std	Y+53, r24	; 0x35
    152c:	9e ab       	std	Y+54, r25	; 0x36
    152e:	af ab       	std	Y+55, r26	; 0x37
    1530:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1532:	6d a9       	ldd	r22, Y+53	; 0x35
    1534:	7e a9       	ldd	r23, Y+54	; 0x36
    1536:	8f a9       	ldd	r24, Y+55	; 0x37
    1538:	98 ad       	ldd	r25, Y+56	; 0x38
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	4a e7       	ldi	r20, 0x7A	; 122
    1540:	53 e4       	ldi	r21, 0x43	; 67
    1542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	89 ab       	std	Y+49, r24	; 0x31
    154c:	9a ab       	std	Y+50, r25	; 0x32
    154e:	ab ab       	std	Y+51, r26	; 0x33
    1550:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1552:	69 a9       	ldd	r22, Y+49	; 0x31
    1554:	7a a9       	ldd	r23, Y+50	; 0x32
    1556:	8b a9       	ldd	r24, Y+51	; 0x33
    1558:	9c a9       	ldd	r25, Y+52	; 0x34
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	40 e8       	ldi	r20, 0x80	; 128
    1560:	5f e3       	ldi	r21, 0x3F	; 63
    1562:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1566:	88 23       	and	r24, r24
    1568:	2c f4       	brge	.+10     	; 0x1574 <LCD_sendCommand+0x7c>
		__ticks = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	98 ab       	std	Y+48, r25	; 0x30
    1570:	8f a7       	std	Y+47, r24	; 0x2f
    1572:	3f c0       	rjmp	.+126    	; 0x15f2 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1574:	69 a9       	ldd	r22, Y+49	; 0x31
    1576:	7a a9       	ldd	r23, Y+50	; 0x32
    1578:	8b a9       	ldd	r24, Y+51	; 0x33
    157a:	9c a9       	ldd	r25, Y+52	; 0x34
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	3f ef       	ldi	r19, 0xFF	; 255
    1580:	4f e7       	ldi	r20, 0x7F	; 127
    1582:	57 e4       	ldi	r21, 0x47	; 71
    1584:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1588:	18 16       	cp	r1, r24
    158a:	4c f5       	brge	.+82     	; 0x15de <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158c:	6d a9       	ldd	r22, Y+53	; 0x35
    158e:	7e a9       	ldd	r23, Y+54	; 0x36
    1590:	8f a9       	ldd	r24, Y+55	; 0x37
    1592:	98 ad       	ldd	r25, Y+56	; 0x38
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e2       	ldi	r20, 0x20	; 32
    159a:	51 e4       	ldi	r21, 0x41	; 65
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	98 ab       	std	Y+48, r25	; 0x30
    15b2:	8f a7       	std	Y+47, r24	; 0x2f
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <LCD_sendCommand+0xdc>
    15b6:	89 e1       	ldi	r24, 0x19	; 25
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	9e a7       	std	Y+46, r25	; 0x2e
    15bc:	8d a7       	std	Y+45, r24	; 0x2d
    15be:	8d a5       	ldd	r24, Y+45	; 0x2d
    15c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <LCD_sendCommand+0xca>
    15c6:	9e a7       	std	Y+46, r25	; 0x2e
    15c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    15cc:	98 a9       	ldd	r25, Y+48	; 0x30
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	98 ab       	std	Y+48, r25	; 0x30
    15d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d6:	98 a9       	ldd	r25, Y+48	; 0x30
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	69 f7       	brne	.-38     	; 0x15b6 <LCD_sendCommand+0xbe>
    15dc:	14 c0       	rjmp	.+40     	; 0x1606 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15de:	69 a9       	ldd	r22, Y+49	; 0x31
    15e0:	7a a9       	ldd	r23, Y+50	; 0x32
    15e2:	8b a9       	ldd	r24, Y+51	; 0x33
    15e4:	9c a9       	ldd	r25, Y+52	; 0x34
    15e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	98 ab       	std	Y+48, r25	; 0x30
    15f0:	8f a7       	std	Y+47, r24	; 0x2f
    15f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15f4:	98 a9       	ldd	r25, Y+48	; 0x30
    15f6:	9c a7       	std	Y+44, r25	; 0x2c
    15f8:	8b a7       	std	Y+43, r24	; 0x2b
    15fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    15fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <LCD_sendCommand+0x106>
    1602:	9c a7       	std	Y+44, r25	; 0x2c
    1604:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);        //delay for processing Tas = 50ns
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_HIGH);  //Set enable =1
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	62 e0       	ldi	r22, 0x02	; 2
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	0e 94 31 07 	call	0xe62	; 0xe62 <GPIO_writePin>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a0 e8       	ldi	r26, 0x80	; 128
    1616:	bf e3       	ldi	r27, 0x3F	; 63
    1618:	8f a3       	std	Y+39, r24	; 0x27
    161a:	98 a7       	std	Y+40, r25	; 0x28
    161c:	a9 a7       	std	Y+41, r26	; 0x29
    161e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1620:	6f a1       	ldd	r22, Y+39	; 0x27
    1622:	78 a5       	ldd	r23, Y+40	; 0x28
    1624:	89 a5       	ldd	r24, Y+41	; 0x29
    1626:	9a a5       	ldd	r25, Y+42	; 0x2a
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a e7       	ldi	r20, 0x7A	; 122
    162e:	53 e4       	ldi	r21, 0x43	; 67
    1630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	8b a3       	std	Y+35, r24	; 0x23
    163a:	9c a3       	std	Y+36, r25	; 0x24
    163c:	ad a3       	std	Y+37, r26	; 0x25
    163e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1640:	6b a1       	ldd	r22, Y+35	; 0x23
    1642:	7c a1       	ldd	r23, Y+36	; 0x24
    1644:	8d a1       	ldd	r24, Y+37	; 0x25
    1646:	9e a1       	ldd	r25, Y+38	; 0x26
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	2c f4       	brge	.+10     	; 0x1662 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	9a a3       	std	Y+34, r25	; 0x22
    165e:	89 a3       	std	Y+33, r24	; 0x21
    1660:	3f c0       	rjmp	.+126    	; 0x16e0 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1662:	6b a1       	ldd	r22, Y+35	; 0x23
    1664:	7c a1       	ldd	r23, Y+36	; 0x24
    1666:	8d a1       	ldd	r24, Y+37	; 0x25
    1668:	9e a1       	ldd	r25, Y+38	; 0x26
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	4c f5       	brge	.+82     	; 0x16cc <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167a:	6f a1       	ldd	r22, Y+39	; 0x27
    167c:	78 a5       	ldd	r23, Y+40	; 0x28
    167e:	89 a5       	ldd	r24, Y+41	; 0x29
    1680:	9a a5       	ldd	r25, Y+42	; 0x2a
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	40 e2       	ldi	r20, 0x20	; 32
    1688:	51 e4       	ldi	r21, 0x41	; 65
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	bc 01       	movw	r22, r24
    1694:	cd 01       	movw	r24, r26
    1696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9a a3       	std	Y+34, r25	; 0x22
    16a0:	89 a3       	std	Y+33, r24	; 0x21
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <LCD_sendCommand+0x1ca>
    16a4:	89 e1       	ldi	r24, 0x19	; 25
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	98 a3       	std	Y+32, r25	; 0x20
    16aa:	8f 8f       	std	Y+31, r24	; 0x1f
    16ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16ae:	98 a1       	ldd	r25, Y+32	; 0x20
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <LCD_sendCommand+0x1b8>
    16b4:	98 a3       	std	Y+32, r25	; 0x20
    16b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ba:	9a a1       	ldd	r25, Y+34	; 0x22
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9a a3       	std	Y+34, r25	; 0x22
    16c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c2:	89 a1       	ldd	r24, Y+33	; 0x21
    16c4:	9a a1       	ldd	r25, Y+34	; 0x22
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	69 f7       	brne	.-38     	; 0x16a4 <LCD_sendCommand+0x1ac>
    16ca:	14 c0       	rjmp	.+40     	; 0x16f4 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	6b a1       	ldd	r22, Y+35	; 0x23
    16ce:	7c a1       	ldd	r23, Y+36	; 0x24
    16d0:	8d a1       	ldd	r24, Y+37	; 0x25
    16d2:	9e a1       	ldd	r25, Y+38	; 0x26
    16d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9a a3       	std	Y+34, r25	; 0x22
    16de:	89 a3       	std	Y+33, r24	; 0x21
    16e0:	89 a1       	ldd	r24, Y+33	; 0x21
    16e2:	9a a1       	ldd	r25, Y+34	; 0x22
    16e4:	9e 8f       	std	Y+30, r25	; 0x1e
    16e6:	8d 8f       	std	Y+29, r24	; 0x1d
    16e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_sendCommand+0x1f4>
    16f0:	9e 8f       	std	Y+30, r25	; 0x1e
    16f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);       //delay for processing Tpw - Tdws = 190ns

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT,command);    //out the command to the data bus
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	69 ad       	ldd	r22, Y+57	; 0x39
    16f8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <GPIO_writePort>
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e8       	ldi	r26, 0x80	; 128
    1702:	bf e3       	ldi	r27, 0x3F	; 63
    1704:	89 8f       	std	Y+25, r24	; 0x19
    1706:	9a 8f       	std	Y+26, r25	; 0x1a
    1708:	ab 8f       	std	Y+27, r26	; 0x1b
    170a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	69 8d       	ldd	r22, Y+25	; 0x19
    170e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1710:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1712:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	4a e7       	ldi	r20, 0x7A	; 122
    171a:	53 e4       	ldi	r21, 0x43	; 67
    171c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8d 8b       	std	Y+21, r24	; 0x15
    1726:	9e 8b       	std	Y+22, r25	; 0x16
    1728:	af 8b       	std	Y+23, r26	; 0x17
    172a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    172c:	6d 89       	ldd	r22, Y+21	; 0x15
    172e:	7e 89       	ldd	r23, Y+22	; 0x16
    1730:	8f 89       	ldd	r24, Y+23	; 0x17
    1732:	98 8d       	ldd	r25, Y+24	; 0x18
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	2c f4       	brge	.+10     	; 0x174e <LCD_sendCommand+0x256>
		__ticks = 1;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	9c 8b       	std	Y+20, r25	; 0x14
    174a:	8b 8b       	std	Y+19, r24	; 0x13
    174c:	3f c0       	rjmp	.+126    	; 0x17cc <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    174e:	6d 89       	ldd	r22, Y+21	; 0x15
    1750:	7e 89       	ldd	r23, Y+22	; 0x16
    1752:	8f 89       	ldd	r24, Y+23	; 0x17
    1754:	98 8d       	ldd	r25, Y+24	; 0x18
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	4f e7       	ldi	r20, 0x7F	; 127
    175c:	57 e4       	ldi	r21, 0x47	; 71
    175e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	4c f5       	brge	.+82     	; 0x17b8 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1766:	69 8d       	ldd	r22, Y+25	; 0x19
    1768:	7a 8d       	ldd	r23, Y+26	; 0x1a
    176a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    176c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	9c 8b       	std	Y+20, r25	; 0x14
    178c:	8b 8b       	std	Y+19, r24	; 0x13
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <LCD_sendCommand+0x2b6>
    1790:	89 e1       	ldi	r24, 0x19	; 25
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	9a 8b       	std	Y+18, r25	; 0x12
    1796:	89 8b       	std	Y+17, r24	; 0x11
    1798:	89 89       	ldd	r24, Y+17	; 0x11
    179a:	9a 89       	ldd	r25, Y+18	; 0x12
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_sendCommand+0x2a4>
    17a0:	9a 8b       	std	Y+18, r25	; 0x12
    17a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a4:	8b 89       	ldd	r24, Y+19	; 0x13
    17a6:	9c 89       	ldd	r25, Y+20	; 0x14
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	9c 8b       	std	Y+20, r25	; 0x14
    17ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ae:	8b 89       	ldd	r24, Y+19	; 0x13
    17b0:	9c 89       	ldd	r25, Y+20	; 0x14
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	69 f7       	brne	.-38     	; 0x1790 <LCD_sendCommand+0x298>
    17b6:	14 c0       	rjmp	.+40     	; 0x17e0 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ba:	7e 89       	ldd	r23, Y+22	; 0x16
    17bc:	8f 89       	ldd	r24, Y+23	; 0x17
    17be:	98 8d       	ldd	r25, Y+24	; 0x18
    17c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	9c 8b       	std	Y+20, r25	; 0x14
    17ca:	8b 8b       	std	Y+19, r24	; 0x13
    17cc:	8b 89       	ldd	r24, Y+19	; 0x13
    17ce:	9c 89       	ldd	r25, Y+20	; 0x14
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	8f 87       	std	Y+15, r24	; 0x0f
    17d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d6:	98 89       	ldd	r25, Y+16	; 0x10
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <LCD_sendCommand+0x2e0>
    17dc:	98 8b       	std	Y+16, r25	; 0x10
    17de:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT,LCD_DB6_PIN_ID,GET_BIT(command,2));
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(command,3));

#endif
	_delay_ms(1);      // delay for processing Tdsw = 100ns
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_LOW); // Clear enable =0
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	62 e0       	ldi	r22, 0x02	; 2
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	0e 94 31 07 	call	0xe62	; 0xe62 <GPIO_writePin>
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a0 e8       	ldi	r26, 0x80	; 128
    17f0:	bf e3       	ldi	r27, 0x3F	; 63
    17f2:	8b 87       	std	Y+11, r24	; 0x0b
    17f4:	9c 87       	std	Y+12, r25	; 0x0c
    17f6:	ad 87       	std	Y+13, r26	; 0x0d
    17f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1800:	9e 85       	ldd	r25, Y+14	; 0x0e
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	4a e7       	ldi	r20, 0x7A	; 122
    1808:	53 e4       	ldi	r21, 0x43	; 67
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8f 83       	std	Y+7, r24	; 0x07
    1814:	98 87       	std	Y+8, r25	; 0x08
    1816:	a9 87       	std	Y+9, r26	; 0x09
    1818:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    182e:	88 23       	and	r24, r24
    1830:	2c f4       	brge	.+10     	; 0x183c <LCD_sendCommand+0x344>
		__ticks = 1;
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	9e 83       	std	Y+6, r25	; 0x06
    1838:	8d 83       	std	Y+5, r24	; 0x05
    183a:	3f c0       	rjmp	.+126    	; 0x18ba <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    183c:	6f 81       	ldd	r22, Y+7	; 0x07
    183e:	78 85       	ldd	r23, Y+8	; 0x08
    1840:	89 85       	ldd	r24, Y+9	; 0x09
    1842:	9a 85       	ldd	r25, Y+10	; 0x0a
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	3f ef       	ldi	r19, 0xFF	; 255
    1848:	4f e7       	ldi	r20, 0x7F	; 127
    184a:	57 e4       	ldi	r21, 0x47	; 71
    184c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1850:	18 16       	cp	r1, r24
    1852:	4c f5       	brge	.+82     	; 0x18a6 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1854:	6b 85       	ldd	r22, Y+11	; 0x0b
    1856:	7c 85       	ldd	r23, Y+12	; 0x0c
    1858:	8d 85       	ldd	r24, Y+13	; 0x0d
    185a:	9e 85       	ldd	r25, Y+14	; 0x0e
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	40 e2       	ldi	r20, 0x20	; 32
    1862:	51 e4       	ldi	r21, 0x41	; 65
    1864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	9e 83       	std	Y+6, r25	; 0x06
    187a:	8d 83       	std	Y+5, r24	; 0x05
    187c:	0f c0       	rjmp	.+30     	; 0x189c <LCD_sendCommand+0x3a4>
    187e:	89 e1       	ldi	r24, 0x19	; 25
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	f1 f7       	brne	.-4      	; 0x188a <LCD_sendCommand+0x392>
    188e:	9c 83       	std	Y+4, r25	; 0x04
    1890:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	01 97       	sbiw	r24, 0x01	; 1
    1898:	9e 83       	std	Y+6, r25	; 0x06
    189a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189c:	8d 81       	ldd	r24, Y+5	; 0x05
    189e:	9e 81       	ldd	r25, Y+6	; 0x06
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	69 f7       	brne	.-38     	; 0x187e <LCD_sendCommand+0x386>
    18a4:	14 c0       	rjmp	.+40     	; 0x18ce <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a6:	6f 81       	ldd	r22, Y+7	; 0x07
    18a8:	78 85       	ldd	r23, Y+8	; 0x08
    18aa:	89 85       	ldd	r24, Y+9	; 0x09
    18ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	9e 83       	std	Y+6, r25	; 0x06
    18b8:	8d 83       	std	Y+5, r24	; 0x05
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	9a 81       	ldd	r25, Y+2	; 0x02
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD_sendCommand+0x3ce>
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);     // delay for processing Th = 13ns

}
    18ce:	e9 96       	adiw	r28, 0x39	; 57
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode (4/8 -bits).
 */

void LCD_init(void){
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	2e 97       	sbiw	r28, 0x0e	; 14
    18ea:	0f b6       	in	r0, 0x3f	; 63
    18ec:	f8 94       	cli
    18ee:	de bf       	out	0x3e, r29	; 62
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	cd bf       	out	0x3d, r28	; 61
	/*Set RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS_PIN,PIN_OUTPUT);   //RS as OUT
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	41 e0       	ldi	r20, 0x01	; 1
    18fa:	0e 94 46 06 	call	0xc8c	; 0xc8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT,LCD_E_PIN ,PIN_OUTPUT);   //E as OUT
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	62 e0       	ldi	r22, 0x02	; 2
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	0e 94 46 06 	call	0xc8c	; 0xc8c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT,LCD_RW_PIN,PIN_OUTPUT);   //RS as OUT
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	61 e0       	ldi	r22, 0x01	; 1
    190c:	41 e0       	ldi	r20, 0x01	; 1
    190e:	0e 94 46 06 	call	0xc8c	; 0xc8c <GPIO_setupPinDirection>
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a0 ea       	ldi	r26, 0xA0	; 160
    1918:	b1 e4       	ldi	r27, 0x41	; 65
    191a:	8b 87       	std	Y+11, r24	; 0x0b
    191c:	9c 87       	std	Y+12, r25	; 0x0c
    191e:	ad 87       	std	Y+13, r26	; 0x0d
    1920:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a e7       	ldi	r20, 0x7A	; 122
    1930:	53 e4       	ldi	r21, 0x43	; 67
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8f 83       	std	Y+7, r24	; 0x07
    193c:	98 87       	std	Y+8, r25	; 0x08
    193e:	a9 87       	std	Y+9, r26	; 0x09
    1940:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1942:	6f 81       	ldd	r22, Y+7	; 0x07
    1944:	78 85       	ldd	r23, Y+8	; 0x08
    1946:	89 85       	ldd	r24, Y+9	; 0x09
    1948:	9a 85       	ldd	r25, Y+10	; 0x0a
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <LCD_init+0x84>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <LCD_init+0x102>
	else if (__tmp > 65535)
    1964:	6f 81       	ldd	r22, Y+7	; 0x07
    1966:	78 85       	ldd	r23, Y+8	; 0x08
    1968:	89 85       	ldd	r24, Y+9	; 0x09
    196a:	9a 85       	ldd	r25, Y+10	; 0x0a
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6b 85       	ldd	r22, Y+11	; 0x0b
    197e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1980:	8d 85       	ldd	r24, Y+13	; 0x0d
    1982:	9e 85       	ldd	r25, Y+14	; 0x0e
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <LCD_init+0xe4>
    19a6:	89 e1       	ldi	r24, 0x19	; 25
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9c 83       	std	Y+4, r25	; 0x04
    19ac:	8b 83       	std	Y+3, r24	; 0x03
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	9c 81       	ldd	r25, Y+4	; 0x04
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <LCD_init+0xd2>
    19b6:	9c 83       	std	Y+4, r25	; 0x04
    19b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8d 81       	ldd	r24, Y+5	; 0x05
    19bc:	9e 81       	ldd	r25, Y+6	; 0x06
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	9e 81       	ldd	r25, Y+6	; 0x06
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <LCD_init+0xc6>
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	6f 81       	ldd	r22, Y+7	; 0x07
    19d0:	78 85       	ldd	r23, Y+8	; 0x08
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9e 83       	std	Y+6, r25	; 0x06
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	9a 83       	std	Y+2, r25	; 0x02
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <LCD_init+0x10e>
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);      //LCD Power ON delay always > 15ms

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);   //Data_Bus as OUT
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	6f ef       	ldi	r22, 0xFF	; 255
    19fa:	0e 94 b7 08 	call	0x116e	; 0x116e <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);   //Setup the LCD Data Mode 8-bits.
    19fe:	88 e3       	ldi	r24, 0x38	; 56
    1a00:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <LCD_sendCommand>

	/*Setup the LCD Data Mode 4-bits */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#endif
	LCD_sendCommand(LCD_CURSOR_OFF);   //cursor off
    1a04:	8c e0       	ldi	r24, 0x0C	; 12
    1a06:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);   //clear screen =0 at the begin
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <LCD_sendCommand>
}
    1a10:	2e 96       	adiw	r28, 0x0e	; 14
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <LCD_displayCharacter>:
/*
 * Description :
 * Display character from the user on the screen.
 */

void LCD_displayCharacter(uint8 character){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	e9 97       	sbiw	r28, 0x39	; 57
    1a2c:	0f b6       	in	r0, 0x3f	; 63
    1a2e:	f8 94       	cli
    1a30:	de bf       	out	0x3e, r29	; 62
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	cd bf       	out	0x3d, r28	; 61
    1a36:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RW_PORT,LCD_RW_PIN,LOGIC_LOW);  // Set RW =0 to write
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	61 e0       	ldi	r22, 0x01	; 1
    1a3c:	40 e0       	ldi	r20, 0x00	; 0
    1a3e:	0e 94 31 07 	call	0xe62	; 0xe62 <GPIO_writePin>
	GPIO_writePin(LCD_RS_PORT,LCD_RS_PIN,LOGIC_HIGH);  // Set RS =1
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 31 07 	call	0xe62	; 0xe62 <GPIO_writePin>
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a0 e8       	ldi	r26, 0x80	; 128
    1a52:	bf e3       	ldi	r27, 0x3F	; 63
    1a54:	8d ab       	std	Y+53, r24	; 0x35
    1a56:	9e ab       	std	Y+54, r25	; 0x36
    1a58:	af ab       	std	Y+55, r26	; 0x37
    1a5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a60:	8f a9       	ldd	r24, Y+55	; 0x37
    1a62:	98 ad       	ldd	r25, Y+56	; 0x38
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	4a e7       	ldi	r20, 0x7A	; 122
    1a6a:	53 e4       	ldi	r21, 0x43	; 67
    1a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	89 ab       	std	Y+49, r24	; 0x31
    1a76:	9a ab       	std	Y+50, r25	; 0x32
    1a78:	ab ab       	std	Y+51, r26	; 0x33
    1a7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1a7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1a80:	8b a9       	ldd	r24, Y+51	; 0x33
    1a82:	9c a9       	ldd	r25, Y+52	; 0x34
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e8       	ldi	r20, 0x80	; 128
    1a8a:	5f e3       	ldi	r21, 0x3F	; 63
    1a8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a90:	88 23       	and	r24, r24
    1a92:	2c f4       	brge	.+10     	; 0x1a9e <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	98 ab       	std	Y+48, r25	; 0x30
    1a9a:	8f a7       	std	Y+47, r24	; 0x2f
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1a9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa0:	7a a9       	ldd	r23, Y+50	; 0x32
    1aa2:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa4:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	4c f5       	brge	.+82     	; 0x1b08 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aba:	8f a9       	ldd	r24, Y+55	; 0x37
    1abc:	98 ad       	ldd	r25, Y+56	; 0x38
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	51 e4       	ldi	r21, 0x41	; 65
    1ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	98 ab       	std	Y+48, r25	; 0x30
    1adc:	8f a7       	std	Y+47, r24	; 0x2f
    1ade:	0f c0       	rjmp	.+30     	; 0x1afe <LCD_displayCharacter+0xdc>
    1ae0:	89 e1       	ldi	r24, 0x19	; 25
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9e a7       	std	Y+46, r25	; 0x2e
    1ae6:	8d a7       	std	Y+45, r24	; 0x2d
    1ae8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <LCD_displayCharacter+0xca>
    1af0:	9e a7       	std	Y+46, r25	; 0x2e
    1af2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1af6:	98 a9       	ldd	r25, Y+48	; 0x30
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	98 ab       	std	Y+48, r25	; 0x30
    1afc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1afe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b00:	98 a9       	ldd	r25, Y+48	; 0x30
    1b02:	00 97       	sbiw	r24, 0x00	; 0
    1b04:	69 f7       	brne	.-38     	; 0x1ae0 <LCD_displayCharacter+0xbe>
    1b06:	14 c0       	rjmp	.+40     	; 0x1b30 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b08:	69 a9       	ldd	r22, Y+49	; 0x31
    1b0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	98 ab       	std	Y+48, r25	; 0x30
    1b1a:	8f a7       	std	Y+47, r24	; 0x2f
    1b1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1b20:	9c a7       	std	Y+44, r25	; 0x2c
    1b22:	8b a7       	std	Y+43, r24	; 0x2b
    1b24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b26:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b28:	01 97       	sbiw	r24, 0x01	; 1
    1b2a:	f1 f7       	brne	.-4      	; 0x1b28 <LCD_displayCharacter+0x106>
    1b2c:	9c a7       	std	Y+44, r25	; 0x2c
    1b2e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_HIGH);  // Set enable =1
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	62 e0       	ldi	r22, 0x02	; 2
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 31 07 	call	0xe62	; 0xe62 <GPIO_writePin>
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 e8       	ldi	r26, 0x80	; 128
    1b40:	bf e3       	ldi	r27, 0x3F	; 63
    1b42:	8f a3       	std	Y+39, r24	; 0x27
    1b44:	98 a7       	std	Y+40, r25	; 0x28
    1b46:	a9 a7       	std	Y+41, r26	; 0x29
    1b48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1b4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1b4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1b50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a e7       	ldi	r20, 0x7A	; 122
    1b58:	53 e4       	ldi	r21, 0x43	; 67
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8b a3       	std	Y+35, r24	; 0x23
    1b64:	9c a3       	std	Y+36, r25	; 0x24
    1b66:	ad a3       	std	Y+37, r26	; 0x25
    1b68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b70:	9e a1       	ldd	r25, Y+38	; 0x26
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e8       	ldi	r20, 0x80	; 128
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b7e:	88 23       	and	r24, r24
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9a a3       	std	Y+34, r25	; 0x22
    1b88:	89 a3       	std	Y+33, r24	; 0x21
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1b8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b90:	8d a1       	ldd	r24, Y+37	; 0x25
    1b92:	9e a1       	ldd	r25, Y+38	; 0x26
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	4c f5       	brge	.+82     	; 0x1bf6 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba8:	89 a5       	ldd	r24, Y+41	; 0x29
    1baa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e2       	ldi	r20, 0x20	; 32
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9a a3       	std	Y+34, r25	; 0x22
    1bca:	89 a3       	std	Y+33, r24	; 0x21
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <LCD_displayCharacter+0x1ca>
    1bce:	89 e1       	ldi	r24, 0x19	; 25
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	98 a3       	std	Y+32, r25	; 0x20
    1bd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1bd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bd8:	98 a1       	ldd	r25, Y+32	; 0x20
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_displayCharacter+0x1b8>
    1bde:	98 a3       	std	Y+32, r25	; 0x20
    1be0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	89 a1       	ldd	r24, Y+33	; 0x21
    1be4:	9a a1       	ldd	r25, Y+34	; 0x22
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	9a a3       	std	Y+34, r25	; 0x22
    1bea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	89 a1       	ldd	r24, Y+33	; 0x21
    1bee:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f7       	brne	.-38     	; 0x1bce <LCD_displayCharacter+0x1ac>
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bf8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1bfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9a a3       	std	Y+34, r25	; 0x22
    1c08:	89 a3       	std	Y+33, r24	; 0x21
    1c0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1c0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1c10:	8d 8f       	std	Y+29, r24	; 0x1d
    1c12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_displayCharacter+0x1f4>
    1c1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1c1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 8)

	GPIO_writePort(LCD_DATA_PORT,character);    //out the command to the data bus
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	69 ad       	ldd	r22, Y+57	; 0x39
    1c22:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <GPIO_writePort>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e8       	ldi	r26, 0x80	; 128
    1c2c:	bf e3       	ldi	r27, 0x3F	; 63
    1c2e:	89 8f       	std	Y+25, r24	; 0x19
    1c30:	9a 8f       	std	Y+26, r25	; 0x1a
    1c32:	ab 8f       	std	Y+27, r26	; 0x1b
    1c34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	69 8d       	ldd	r22, Y+25	; 0x19
    1c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a e7       	ldi	r20, 0x7A	; 122
    1c44:	53 e4       	ldi	r21, 0x43	; 67
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8d 8b       	std	Y+21, r24	; 0x15
    1c50:	9e 8b       	std	Y+22, r25	; 0x16
    1c52:	af 8b       	std	Y+23, r26	; 0x17
    1c54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c56:	6d 89       	ldd	r22, Y+21	; 0x15
    1c58:	7e 89       	ldd	r23, Y+22	; 0x16
    1c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9c 8b       	std	Y+20, r25	; 0x14
    1c74:	8b 8b       	std	Y+19, r24	; 0x13
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1c78:	6d 89       	ldd	r22, Y+21	; 0x15
    1c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	69 8d       	ldd	r22, Y+25	; 0x19
    1c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9c 8b       	std	Y+20, r25	; 0x14
    1cb6:	8b 8b       	std	Y+19, r24	; 0x13
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <LCD_displayCharacter+0x2b6>
    1cba:	89 e1       	ldi	r24, 0x19	; 25
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9a 8b       	std	Y+18, r25	; 0x12
    1cc0:	89 8b       	std	Y+17, r24	; 0x11
    1cc2:	89 89       	ldd	r24, Y+17	; 0x11
    1cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_displayCharacter+0x2a4>
    1cca:	9a 8b       	std	Y+18, r25	; 0x12
    1ccc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9c 8b       	std	Y+20, r25	; 0x14
    1cd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cda:	9c 89       	ldd	r25, Y+20	; 0x14
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <LCD_displayCharacter+0x298>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9c 8b       	std	Y+20, r25	; 0x14
    1cf4:	8b 8b       	std	Y+19, r24	; 0x13
    1cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfa:	98 8b       	std	Y+16, r25	; 0x10
    1cfc:	8f 87       	std	Y+15, r24	; 0x0f
    1cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d00:	98 89       	ldd	r25, Y+16	; 0x10
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_displayCharacter+0x2e0>
    1d06:	98 8b       	std	Y+16, r25	; 0x10
    1d08:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7_PIN_ID,GET_BIT(character,3));

#endif

	_delay_ms(1);    // delay for  Tdsw = 100ns
	GPIO_writePin(LCD_E_PORT,LCD_E_PIN,LOGIC_LOW); // Clear enable =0
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	62 e0       	ldi	r22, 0x02	; 2
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	0e 94 31 07 	call	0xe62	; 0xe62 <GPIO_writePin>
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a0 e8       	ldi	r26, 0x80	; 128
    1d1a:	bf e3       	ldi	r27, 0x3F	; 63
    1d1c:	8b 87       	std	Y+11, r24	; 0x0b
    1d1e:	9c 87       	std	Y+12, r25	; 0x0c
    1d20:	ad 87       	std	Y+13, r26	; 0x0d
    1d22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	4a e7       	ldi	r20, 0x7A	; 122
    1d32:	53 e4       	ldi	r21, 0x43	; 67
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8f 83       	std	Y+7, r24	; 0x07
    1d3e:	98 87       	std	Y+8, r25	; 0x08
    1d40:	a9 87       	std	Y+9, r26	; 0x09
    1d42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e8       	ldi	r20, 0x80	; 128
    1d52:	5f e3       	ldi	r21, 0x3F	; 63
    1d54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d58:	88 23       	and	r24, r24
    1d5a:	2c f4       	brge	.+10     	; 0x1d66 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	9e 83       	std	Y+6, r25	; 0x06
    1d62:	8d 83       	std	Y+5, r24	; 0x05
    1d64:	3f c0       	rjmp	.+126    	; 0x1de4 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1d66:	6f 81       	ldd	r22, Y+7	; 0x07
    1d68:	78 85       	ldd	r23, Y+8	; 0x08
    1d6a:	89 85       	ldd	r24, Y+9	; 0x09
    1d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	3f ef       	ldi	r19, 0xFF	; 255
    1d72:	4f e7       	ldi	r20, 0x7F	; 127
    1d74:	57 e4       	ldi	r21, 0x47	; 71
    1d76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d7a:	18 16       	cp	r1, r24
    1d7c:	4c f5       	brge	.+82     	; 0x1dd0 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 e2       	ldi	r20, 0x20	; 32
    1d8c:	51 e4       	ldi	r21, 0x41	; 65
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	0f c0       	rjmp	.+30     	; 0x1dc6 <LCD_displayCharacter+0x3a4>
    1da8:	89 e1       	ldi	r24, 0x19	; 25
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9c 83       	std	Y+4, r25	; 0x04
    1dae:	8b 83       	std	Y+3, r24	; 0x03
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_displayCharacter+0x392>
    1db8:	9c 83       	std	Y+4, r25	; 0x04
    1dba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	9e 83       	std	Y+6, r25	; 0x06
    1dc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	00 97       	sbiw	r24, 0x00	; 0
    1dcc:	69 f7       	brne	.-38     	; 0x1da8 <LCD_displayCharacter+0x386>
    1dce:	14 c0       	rjmp	.+40     	; 0x1df8 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd2:	78 85       	ldd	r23, Y+8	; 0x08
    1dd4:	89 85       	ldd	r24, Y+9	; 0x09
    1dd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	9a 83       	std	Y+2, r25	; 0x02
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	9a 81       	ldd	r25, Y+2	; 0x02
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <LCD_displayCharacter+0x3ce>
    1df4:	9a 83       	std	Y+2, r25	; 0x02
    1df6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);    // delay for Th = 13ns
}
    1df8:	e9 96       	adiw	r28, 0x39	; 57
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <LCD_displayString>:
/*
 * Description :
 * Display string from the user on the screen.
 */

void LCD_displayString(const char *string){
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <LCD_displayString+0x6>
    1e10:	0f 92       	push	r0
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	9b 83       	std	Y+3, r25	; 0x03
    1e18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i =0;
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	0e c0       	rjmp	.+28     	; 0x1e3a <LCD_displayString+0x30>
	while(string[i] != '\0'){
		LCD_displayCharacter(string[i]);
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	9b 81       	ldd	r25, Y+3	; 0x03
    1e28:	fc 01       	movw	r30, r24
    1e2a:	e2 0f       	add	r30, r18
    1e2c:	f3 1f       	adc	r31, r19
    1e2e:	80 81       	ld	r24, Z
    1e30:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <LCD_displayCharacter>
		i++;
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	8f 5f       	subi	r24, 0xFF	; 255
    1e38:	89 83       	std	Y+1, r24	; 0x01
 * Display string from the user on the screen.
 */

void LCD_displayString(const char *string){
	uint8 i =0;
	while(string[i] != '\0'){
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	9b 81       	ldd	r25, Y+3	; 0x03
    1e44:	fc 01       	movw	r30, r24
    1e46:	e2 0f       	add	r30, r18
    1e48:	f3 1f       	adc	r31, r19
    1e4a:	80 81       	ld	r24, Z
    1e4c:	88 23       	and	r24, r24
    1e4e:	39 f7       	brne	.-50     	; 0x1e1e <LCD_displayString+0x14>
		LCD_displayCharacter(string[i]);
		i++;
	}
}
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	0f 90       	pop	r0
    1e56:	cf 91       	pop	r28
    1e58:	df 91       	pop	r29
    1e5a:	08 95       	ret

00001e5c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column on the screen.
 */

void LCD_moveCursor(uint8 row,uint8 col){
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <LCD_moveCursor+0x6>
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <LCD_moveCursor+0x8>
    1e64:	0f 92       	push	r0
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	8a 83       	std	Y+2, r24	; 0x02
    1e6c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row){
    1e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	3d 83       	std	Y+5, r19	; 0x05
    1e76:	2c 83       	std	Y+4, r18	; 0x04
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	91 05       	cpc	r25, r1
    1e80:	c1 f0       	breq	.+48     	; 0x1eb2 <LCD_moveCursor+0x56>
    1e82:	2c 81       	ldd	r18, Y+4	; 0x04
    1e84:	3d 81       	ldd	r19, Y+5	; 0x05
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	2c f4       	brge	.+10     	; 0x1e96 <LCD_moveCursor+0x3a>
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	00 97       	sbiw	r24, 0x00	; 0
    1e92:	61 f0       	breq	.+24     	; 0x1eac <LCD_moveCursor+0x50>
    1e94:	19 c0       	rjmp	.+50     	; 0x1ec8 <LCD_moveCursor+0x6c>
    1e96:	2c 81       	ldd	r18, Y+4	; 0x04
    1e98:	3d 81       	ldd	r19, Y+5	; 0x05
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	69 f0       	breq	.+26     	; 0x1eba <LCD_moveCursor+0x5e>
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	61 f0       	breq	.+24     	; 0x1ec2 <LCD_moveCursor+0x66>
    1eaa:	0e c0       	rjmp	.+28     	; 0x1ec8 <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address= col;
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	0b c0       	rjmp	.+22     	; 0x1ec8 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address= col+ 0x40;
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	80 5c       	subi	r24, 0xC0	; 192
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	07 c0       	rjmp	.+14     	; 0x1ec8 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address= col+ 0x10;
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	80 5f       	subi	r24, 0xF0	; 240
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	03 c0       	rjmp	.+6      	; 0x1ec8 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address= col+ 0x50;
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	80 5b       	subi	r24, 0xB0	; 176
    1ec6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	LCD_sendCommand(LCD_SET_CURSOR_LOCATION | lcd_memory_address);
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	80 68       	ori	r24, 0x80	; 128
    1ecc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <LCD_sendCommand>

}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the string from user in a specified row and column on the screen.
 */

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *String){
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <LCD_displayStringRowColumn+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <LCD_displayStringRowColumn+0x8>
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	6a 83       	std	Y+2, r22	; 0x02
    1ef0:	5c 83       	std	Y+4, r21	; 0x04
    1ef2:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor( row,col );    //go to to the required position on the LCD
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ef8:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <LCD_moveCursor>
	LCD_displayString( String );
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>

}
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	cf 91       	pop	r28
    1f0e:	df 91       	pop	r29
    1f10:	08 95       	ret

00001f12 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen.(convert data to its corresponding ASCII value)
 */

void LCD_intgerToString(int data){
    1f12:	df 93       	push	r29
    1f14:	cf 93       	push	r28
    1f16:	cd b7       	in	r28, 0x3d	; 61
    1f18:	de b7       	in	r29, 0x3e	; 62
    1f1a:	66 97       	sbiw	r28, 0x16	; 22
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	9e 8b       	std	Y+22, r25	; 0x16
    1f28:	8d 8b       	std	Y+21, r24	; 0x15
	char array[20];    // array to hold the ASCII result
	itoa(data,array,10);     //Use itoa C function to convert the data to ASCII value, 10 for the base
    1f2a:	8d 89       	ldd	r24, Y+21	; 0x15
    1f2c:	9e 89       	ldd	r25, Y+22	; 0x16
    1f2e:	9e 01       	movw	r18, r28
    1f30:	2f 5f       	subi	r18, 0xFF	; 255
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
    1f34:	b9 01       	movw	r22, r18
    1f36:	4a e0       	ldi	r20, 0x0A	; 10
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	0e 94 9a 13 	call	0x2734	; 0x2734 <itoa>
	LCD_displayString(array);
    1f3e:	ce 01       	movw	r24, r28
    1f40:	01 96       	adiw	r24, 0x01	; 1
    1f42:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
}
    1f46:	66 96       	adiw	r28, 0x16	; 22
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <LCD_clearScreen>:
 * Description :
 * Send Clear Command to the screen.
 */

void LCD_clearScreen(void)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <LCD_sendCommand>
}
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <timer1>:
 *******************************************************************************/
/*
 * Description:
 * Function to count number of overflows
 */
void timer1(void){
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
	counter++;
    1f74:	80 91 f8 00 	lds	r24, 0x00F8
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	80 93 f8 00 	sts	0x00F8, r24
}
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <main>:

int main(void)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	a7 97       	sbiw	r28, 0x27	; 39
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    1f98:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <LCD_init>

	/* Enable global interrupts in MC by setting the I-Bit */
	SREG  |= (1<<7);
    1f9c:	af e5       	ldi	r26, 0x5F	; 95
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	ef e5       	ldi	r30, 0x5F	; 95
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	80 68       	ori	r24, 0x80	; 128
    1fa8:	8c 93       	st	X, r24

	UART_ConfigType UART_Config ={Data_8_Bits ,Parity_Disable ,Stop_1_Bit ,9600 };
    1faa:	9e 01       	movw	r18, r28
    1fac:	21 5f       	subi	r18, 0xF1	; 241
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	3f 8f       	std	Y+31, r19	; 0x1f
    1fb2:	2e 8f       	std	Y+30, r18	; 0x1e
    1fb4:	8f ee       	ldi	r24, 0xEF	; 239
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	99 a3       	std	Y+33, r25	; 0x21
    1fba:	88 a3       	std	Y+32, r24	; 0x20
    1fbc:	97 e0       	ldi	r25, 0x07	; 7
    1fbe:	9a a3       	std	Y+34, r25	; 0x22
    1fc0:	e8 a1       	ldd	r30, Y+32	; 0x20
    1fc2:	f9 a1       	ldd	r31, Y+33	; 0x21
    1fc4:	00 80       	ld	r0, Z
    1fc6:	28 a1       	ldd	r18, Y+32	; 0x20
    1fc8:	39 a1       	ldd	r19, Y+33	; 0x21
    1fca:	2f 5f       	subi	r18, 0xFF	; 255
    1fcc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fce:	39 a3       	std	Y+33, r19	; 0x21
    1fd0:	28 a3       	std	Y+32, r18	; 0x20
    1fd2:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1fd4:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1fd6:	00 82       	st	Z, r0
    1fd8:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1fda:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1fdc:	2f 5f       	subi	r18, 0xFF	; 255
    1fde:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe0:	3f 8f       	std	Y+31, r19	; 0x1f
    1fe2:	2e 8f       	std	Y+30, r18	; 0x1e
    1fe4:	3a a1       	ldd	r19, Y+34	; 0x22
    1fe6:	31 50       	subi	r19, 0x01	; 1
    1fe8:	3a a3       	std	Y+34, r19	; 0x22
    1fea:	8a a1       	ldd	r24, Y+34	; 0x22
    1fec:	88 23       	and	r24, r24
    1fee:	41 f7       	brne	.-48     	; 0x1fc0 <main+0x3c>
	UART_init( &UART_Config );
    1ff0:	ce 01       	movw	r24, r28
    1ff2:	0f 96       	adiw	r24, 0x0f	; 15
    1ff4:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_init>

	Timer1_ConfigType Timer1_Config ={ 0,1000 ,F_CPU_1024,CTC};
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	76 96       	adiw	r30, 0x16	; 22
    1ffc:	fc a3       	std	Y+36, r31	; 0x24
    1ffe:	eb a3       	std	Y+35, r30	; 0x23
    2000:	29 ee       	ldi	r18, 0xE9	; 233
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	3e a3       	std	Y+38, r19	; 0x26
    2006:	2d a3       	std	Y+37, r18	; 0x25
    2008:	36 e0       	ldi	r19, 0x06	; 6
    200a:	3f a3       	std	Y+39, r19	; 0x27
    200c:	ed a1       	ldd	r30, Y+37	; 0x25
    200e:	fe a1       	ldd	r31, Y+38	; 0x26
    2010:	00 80       	ld	r0, Z
    2012:	2d a1       	ldd	r18, Y+37	; 0x25
    2014:	3e a1       	ldd	r19, Y+38	; 0x26
    2016:	2f 5f       	subi	r18, 0xFF	; 255
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	3e a3       	std	Y+38, r19	; 0x26
    201c:	2d a3       	std	Y+37, r18	; 0x25
    201e:	eb a1       	ldd	r30, Y+35	; 0x23
    2020:	fc a1       	ldd	r31, Y+36	; 0x24
    2022:	00 82       	st	Z, r0
    2024:	2b a1       	ldd	r18, Y+35	; 0x23
    2026:	3c a1       	ldd	r19, Y+36	; 0x24
    2028:	2f 5f       	subi	r18, 0xFF	; 255
    202a:	3f 4f       	sbci	r19, 0xFF	; 255
    202c:	3c a3       	std	Y+36, r19	; 0x24
    202e:	2b a3       	std	Y+35, r18	; 0x23
    2030:	3f a1       	ldd	r19, Y+39	; 0x27
    2032:	31 50       	subi	r19, 0x01	; 1
    2034:	3f a3       	std	Y+39, r19	; 0x27
    2036:	8f a1       	ldd	r24, Y+39	; 0x27
    2038:	88 23       	and	r24, r24
    203a:	41 f7       	brne	.-48     	; 0x200c <main+0x88>
	Timer1_setCallBack(timer1);
    203c:	86 eb       	ldi	r24, 0xB6	; 182
    203e:	9f e0       	ldi	r25, 0x0F	; 15
    2040:	0e 94 1c 12 	call	0x2438	; 0x2438 <Timer1_setCallBack>

	UART_sendByte(READY);
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>

	for(;;){

		state= UART_recieveByte();
    204a:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_recieveByte>
    204e:	80 93 f7 00 	sts	0x00F7, r24

		switch(state){
    2052:	80 91 f7 00 	lds	r24, 0x00F7
    2056:	e8 2f       	mov	r30, r24
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	fd 8f       	std	Y+29, r31	; 0x1d
    205c:	ec 8f       	std	Y+28, r30	; 0x1c
    205e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2060:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2062:	24 30       	cpi	r18, 0x04	; 4
    2064:	31 05       	cpc	r19, r1
    2066:	09 f4       	brne	.+2      	; 0x206a <main+0xe6>
    2068:	d6 c0       	rjmp	.+428    	; 0x2216 <main+0x292>
    206a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    206c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    206e:	85 30       	cpi	r24, 0x05	; 5
    2070:	91 05       	cpc	r25, r1
    2072:	5c f4       	brge	.+22     	; 0x208a <main+0x106>
    2074:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2076:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2078:	e2 30       	cpi	r30, 0x02	; 2
    207a:	f1 05       	cpc	r31, r1
    207c:	c1 f0       	breq	.+48     	; 0x20ae <main+0x12a>
    207e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2080:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2082:	23 30       	cpi	r18, 0x03	; 3
    2084:	31 05       	cpc	r19, r1
    2086:	21 f1       	breq	.+72     	; 0x20d0 <main+0x14c>
    2088:	e0 cf       	rjmp	.-64     	; 0x204a <main+0xc6>
    208a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    208c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    208e:	86 30       	cpi	r24, 0x06	; 6
    2090:	91 05       	cpc	r25, r1
    2092:	09 f4       	brne	.+2      	; 0x2096 <main+0x112>
    2094:	ea c0       	rjmp	.+468    	; 0x226a <main+0x2e6>
    2096:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2098:	fd 8d       	ldd	r31, Y+29	; 0x1d
    209a:	e6 30       	cpi	r30, 0x06	; 6
    209c:	f1 05       	cpc	r31, r1
    209e:	0c f4       	brge	.+2      	; 0x20a2 <main+0x11e>
    20a0:	cf c0       	rjmp	.+414    	; 0x2240 <main+0x2bc>
    20a2:	2c 8d       	ldd	r18, Y+28	; 0x1c
    20a4:	3d 8d       	ldd	r19, Y+29	; 0x1d
    20a6:	27 30       	cpi	r18, 0x07	; 7
    20a8:	31 05       	cpc	r19, r1
    20aa:	39 f1       	breq	.+78     	; 0x20fa <main+0x176>
    20ac:	ce cf       	rjmp	.-100    	; 0x204a <main+0xc6>

		case ENTER_PASS:

			/* Wait until Control-ECU is ready to receive */
			while(UART_recieveByte() != READY);
    20ae:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_recieveByte>
    20b2:	88 23       	and	r24, r24
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <main+0x12a>
			LCD_clearScreen();
    20b6:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
			LCD_displayString("Plz Enter Pass:");
    20ba:	80 e6       	ldi	r24, 0x60	; 96
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
			LCD_moveCursor(1,0);
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <LCD_moveCursor>
			HMI_ECU_takePass();
    20ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_ECU_takePass>
    20ce:	bd cf       	rjmp	.-134    	; 0x204a <main+0xc6>
				break;

		case RE_ENTER_PASS:

			/* Wait until Control-ECU is ready to receive */
			while(UART_recieveByte() != READY);
    20d0:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_recieveByte>
    20d4:	88 23       	and	r24, r24
    20d6:	e1 f7       	brne	.-8      	; 0x20d0 <main+0x14c>
			LCD_clearScreen();
    20d8:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
			LCD_displayString("Plz Re-enter the");
    20dc:	80 e7       	ldi	r24, 0x70	; 112
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
			LCD_moveCursor(1,0);
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	60 e0       	ldi	r22, 0x00	; 0
    20e8:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <LCD_moveCursor>
			LCD_displayString("same Pass: ");
    20ec:	81 e8       	ldi	r24, 0x81	; 129
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
			HMI_ECU_takePass();
    20f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_ECU_takePass>
    20f8:	a8 cf       	rjmp	.-176    	; 0x204a <main+0xc6>
			break;

		case MAIN_OPTIONS:
			LCD_clearScreen();
    20fa:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
			LCD_displayString("Right Pass");
    20fe:	8d e8       	ldi	r24, 0x8D	; 141
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	aa e7       	ldi	r26, 0x7A	; 122
    210c:	b4 e4       	ldi	r27, 0x44	; 68
    210e:	8b 87       	std	Y+11, r24	; 0x0b
    2110:	9c 87       	std	Y+12, r25	; 0x0c
    2112:	ad 87       	std	Y+13, r26	; 0x0d
    2114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	6b 85       	ldd	r22, Y+11	; 0x0b
    2118:	7c 85       	ldd	r23, Y+12	; 0x0c
    211a:	8d 85       	ldd	r24, Y+13	; 0x0d
    211c:	9e 85       	ldd	r25, Y+14	; 0x0e
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	4a e7       	ldi	r20, 0x7A	; 122
    2124:	53 e4       	ldi	r21, 0x43	; 67
    2126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8f 83       	std	Y+7, r24	; 0x07
    2130:	98 87       	std	Y+8, r25	; 0x08
    2132:	a9 87       	std	Y+9, r26	; 0x09
    2134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2136:	6f 81       	ldd	r22, Y+7	; 0x07
    2138:	78 85       	ldd	r23, Y+8	; 0x08
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	9a 85       	ldd	r25, Y+10	; 0x0a
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <main+0x1d4>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <main+0x252>
	else if (__tmp > 65535)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <main+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	6b 85       	ldd	r22, Y+11	; 0x0b
    2172:	7c 85       	ldd	r23, Y+12	; 0x0c
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <main+0x234>
    219a:	89 e1       	ldi	r24, 0x19	; 25
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9c 83       	std	Y+4, r25	; 0x04
    21a0:	8b 83       	std	Y+3, r24	; 0x03
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <main+0x222>
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8d 81       	ldd	r24, Y+5	; 0x05
    21b0:	9e 81       	ldd	r25, Y+6	; 0x06
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9e 83       	std	Y+6, r25	; 0x06
    21b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <main+0x216>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6f 81       	ldd	r22, Y+7	; 0x07
    21c4:	78 85       	ldd	r23, Y+8	; 0x08
    21c6:	89 85       	ldd	r24, Y+9	; 0x09
    21c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	8d 81       	ldd	r24, Y+5	; 0x05
    21d8:	9e 81       	ldd	r25, Y+6	; 0x06
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	9a 81       	ldd	r25, Y+2	; 0x02
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <main+0x25e>
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			LCD_clearScreen();
    21ea:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    21ee:	88 e9       	ldi	r24, 0x98	; 152
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
			LCD_displayStringRowColumn(1,0,"- : Change Pass");
    21f6:	26 ea       	ldi	r18, 0xA6	; 166
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	60 e0       	ldi	r22, 0x00	; 0
    21fe:	a9 01       	movw	r20, r18
    2200:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <LCD_displayStringRowColumn>
			/* get & send the pressed button from USER */
			while(UART_recieveByte() != READY);
    2204:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_recieveByte>
    2208:	88 23       	and	r24, r24
    220a:	e1 f7       	brne	.-8      	; 0x2204 <main+0x280>
			UART_sendByte( KEYPAD_getPressedKey() );
    220c:	0e 94 84 09 	call	0x1308	; 0x1308 <KEYPAD_getPressedKey>
    2210:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
    2214:	1a cf       	rjmp	.-460    	; 0x204a <main+0xc6>
			break;

		case OPEN_DOOR:
			LCD_clearScreen();
    2216:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
			LCD_displayString("Door is Unlocking");
    221a:	86 eb       	ldi	r24, 0xB6	; 182
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
			//delay 15 sec
			Timer1_init(&Timer1_Config);
    2222:	ce 01       	movw	r24, r28
    2224:	46 96       	adiw	r24, 0x16	; 22
    2226:	0e 94 b0 11 	call	0x2360	; 0x2360 <Timer1_init>
			while(counter < 15);
    222a:	80 91 f8 00 	lds	r24, 0x00F8
    222e:	8f 30       	cpi	r24, 0x0F	; 15
    2230:	e0 f3       	brcs	.-8      	; 0x222a <main+0x2a6>
			Timer1_deInit();
    2232:	0e 94 07 12 	call	0x240e	; 0x240e <Timer1_deInit>
			counter =0;
    2236:	10 92 f8 00 	sts	0x00F8, r1
			LCD_clearScreen();
    223a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
    223e:	05 cf       	rjmp	.-502    	; 0x204a <main+0xc6>

			break;

		case CLOSE_DOOR:
			LCD_clearScreen();
    2240:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
			LCD_displayString("Door is locking");
    2244:	88 ec       	ldi	r24, 0xC8	; 200
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
			//delay 15 sec
			Timer1_init(&Timer1_Config);
    224c:	ce 01       	movw	r24, r28
    224e:	46 96       	adiw	r24, 0x16	; 22
    2250:	0e 94 b0 11 	call	0x2360	; 0x2360 <Timer1_init>
			while(counter < 15);
    2254:	80 91 f8 00 	lds	r24, 0x00F8
    2258:	8f 30       	cpi	r24, 0x0F	; 15
    225a:	e0 f3       	brcs	.-8      	; 0x2254 <main+0x2d0>
			Timer1_deInit();
    225c:	0e 94 07 12 	call	0x240e	; 0x240e <Timer1_deInit>
			counter =0;
    2260:	10 92 f8 00 	sts	0x00F8, r1
			LCD_clearScreen();
    2264:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
    2268:	f0 ce       	rjmp	.-544    	; 0x204a <main+0xc6>
			break;

		case BUZZER_ON:
			LCD_clearScreen();
    226a:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
			LCD_displayString("ERROR !!");
    226e:	88 ed       	ldi	r24, 0xD8	; 216
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <LCD_displayString>
			//delay 1 min
			Timer1_init(&Timer1_Config);
    2276:	ce 01       	movw	r24, r28
    2278:	46 96       	adiw	r24, 0x16	; 22
    227a:	0e 94 b0 11 	call	0x2360	; 0x2360 <Timer1_init>
			while(counter < 60);
    227e:	80 91 f8 00 	lds	r24, 0x00F8
    2282:	8c 33       	cpi	r24, 0x3C	; 60
    2284:	e0 f3       	brcs	.-8      	; 0x227e <main+0x2fa>
			Timer1_deInit();
    2286:	0e 94 07 12 	call	0x240e	; 0x240e <Timer1_deInit>
			counter =0;
    228a:	10 92 f8 00 	sts	0x00F8, r1
			LCD_clearScreen();
    228e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_clearScreen>
    2292:	db ce       	rjmp	.-586    	; 0x204a <main+0xc6>

00002294 <__vector_9>:
 *******************************************************************************/

/* Call the Call Back function In case of OVER mood */

ISR(TIMER1_OVF_vect)
{
    2294:	1f 92       	push	r1
    2296:	0f 92       	push	r0
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	0f 92       	push	r0
    229c:	11 24       	eor	r1, r1
    229e:	2f 93       	push	r18
    22a0:	3f 93       	push	r19
    22a2:	4f 93       	push	r20
    22a4:	5f 93       	push	r21
    22a6:	6f 93       	push	r22
    22a8:	7f 93       	push	r23
    22aa:	8f 93       	push	r24
    22ac:	9f 93       	push	r25
    22ae:	af 93       	push	r26
    22b0:	bf 93       	push	r27
    22b2:	ef 93       	push	r30
    22b4:	ff 93       	push	r31
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    22be:	80 91 f9 00 	lds	r24, 0x00F9
    22c2:	90 91 fa 00 	lds	r25, 0x00FA
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	29 f0       	breq	.+10     	; 0x22d4 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    22ca:	e0 91 f9 00 	lds	r30, 0x00F9
    22ce:	f0 91 fa 00 	lds	r31, 0x00FA
    22d2:	09 95       	icall
	}
}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	ff 91       	pop	r31
    22da:	ef 91       	pop	r30
    22dc:	bf 91       	pop	r27
    22de:	af 91       	pop	r26
    22e0:	9f 91       	pop	r25
    22e2:	8f 91       	pop	r24
    22e4:	7f 91       	pop	r23
    22e6:	6f 91       	pop	r22
    22e8:	5f 91       	pop	r21
    22ea:	4f 91       	pop	r20
    22ec:	3f 91       	pop	r19
    22ee:	2f 91       	pop	r18
    22f0:	0f 90       	pop	r0
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	0f 90       	pop	r0
    22f6:	1f 90       	pop	r1
    22f8:	18 95       	reti

000022fa <__vector_7>:
/*
 * In case of COMPARE mood
 */

ISR(TIMER1_COMPA_vect)
{
    22fa:	1f 92       	push	r1
    22fc:	0f 92       	push	r0
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	0f 92       	push	r0
    2302:	11 24       	eor	r1, r1
    2304:	2f 93       	push	r18
    2306:	3f 93       	push	r19
    2308:	4f 93       	push	r20
    230a:	5f 93       	push	r21
    230c:	6f 93       	push	r22
    230e:	7f 93       	push	r23
    2310:	8f 93       	push	r24
    2312:	9f 93       	push	r25
    2314:	af 93       	push	r26
    2316:	bf 93       	push	r27
    2318:	ef 93       	push	r30
    231a:	ff 93       	push	r31
    231c:	df 93       	push	r29
    231e:	cf 93       	push	r28
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2324:	80 91 f9 00 	lds	r24, 0x00F9
    2328:	90 91 fa 00 	lds	r25, 0x00FA
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	29 f0       	breq	.+10     	; 0x233a <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    2330:	e0 91 f9 00 	lds	r30, 0x00F9
    2334:	f0 91 fa 00 	lds	r31, 0x00FA
    2338:	09 95       	icall
	}
}
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	ff 91       	pop	r31
    2340:	ef 91       	pop	r30
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	7f 91       	pop	r23
    234c:	6f 91       	pop	r22
    234e:	5f 91       	pop	r21
    2350:	4f 91       	pop	r20
    2352:	3f 91       	pop	r19
    2354:	2f 91       	pop	r18
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f 90       	pop	r0
    235c:	1f 90       	pop	r1
    235e:	18 95       	reti

00002360 <Timer1_init>:
 * Description:
 * Function to initialize the Timer driver.
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <Timer1_init+0x6>
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = (1 << FOC1A) | ((TCCR1A & 0xFC) | (Config_Ptr->mode & 0x03));
    236e:	af e4       	ldi	r26, 0x4F	; 79
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ef e4       	ldi	r30, 0x4F	; 79
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	98 2f       	mov	r25, r24
    237a:	9c 7f       	andi	r25, 0xFC	; 252
    237c:	e9 81       	ldd	r30, Y+1	; 0x01
    237e:	fa 81       	ldd	r31, Y+2	; 0x02
    2380:	85 81       	ldd	r24, Z+5	; 0x05
    2382:	83 70       	andi	r24, 0x03	; 3
    2384:	89 2b       	or	r24, r25
    2386:	88 60       	ori	r24, 0x08	; 8
    2388:	8c 93       	st	X, r24
	TCCR1B = ((TCCR1B & 0xF8) | (Config_Ptr->prescaler & 0x07)) | ((TCCR1B & 0xE7) | ((Config_Ptr->mode & 0x0C)<<1));
    238a:	ae e4       	ldi	r26, 0x4E	; 78
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	ee e4       	ldi	r30, 0x4E	; 78
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	98 2f       	mov	r25, r24
    2396:	98 7f       	andi	r25, 0xF8	; 248
    2398:	e9 81       	ldd	r30, Y+1	; 0x01
    239a:	fa 81       	ldd	r31, Y+2	; 0x02
    239c:	84 81       	ldd	r24, Z+4	; 0x04
    239e:	87 70       	andi	r24, 0x07	; 7
    23a0:	39 2f       	mov	r19, r25
    23a2:	38 2b       	or	r19, r24
    23a4:	ee e4       	ldi	r30, 0x4E	; 78
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	80 81       	ld	r24, Z
    23aa:	28 2f       	mov	r18, r24
    23ac:	27 7e       	andi	r18, 0xE7	; 231
    23ae:	e9 81       	ldd	r30, Y+1	; 0x01
    23b0:	fa 81       	ldd	r31, Y+2	; 0x02
    23b2:	85 81       	ldd	r24, Z+5	; 0x05
    23b4:	88 2f       	mov	r24, r24
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	8c 70       	andi	r24, 0x0C	; 12
    23ba:	90 70       	andi	r25, 0x00	; 0
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	82 2b       	or	r24, r18
    23c2:	83 2b       	or	r24, r19
    23c4:	8c 93       	st	X, r24
	 /* Set timer initial value from user */
	TCNT1 = Config_Ptr->initial_value;
    23c6:	ac e4       	ldi	r26, 0x4C	; 76
    23c8:	b0 e0       	ldi	r27, 0x00	; 0
    23ca:	e9 81       	ldd	r30, Y+1	; 0x01
    23cc:	fa 81       	ldd	r31, Y+2	; 0x02
    23ce:	80 81       	ld	r24, Z
    23d0:	91 81       	ldd	r25, Z+1	; 0x01
    23d2:	11 96       	adiw	r26, 0x01	; 1
    23d4:	9c 93       	st	X, r25
    23d6:	8e 93       	st	-X, r24
	if(Config_Ptr->mode == CTC)
    23d8:	e9 81       	ldd	r30, Y+1	; 0x01
    23da:	fa 81       	ldd	r31, Y+2	; 0x02
    23dc:	85 81       	ldd	r24, Z+5	; 0x05
    23de:	84 30       	cpi	r24, 0x04	; 4
    23e0:	51 f4       	brne	.+20     	; 0x23f6 <Timer1_init+0x96>
	{
		OCR1A = Config_Ptr->compare_value;
    23e2:	ea e4       	ldi	r30, 0x4A	; 74
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	a9 81       	ldd	r26, Y+1	; 0x01
    23e8:	ba 81       	ldd	r27, Y+2	; 0x02
    23ea:	12 96       	adiw	r26, 0x02	; 2
    23ec:	8d 91       	ld	r24, X+
    23ee:	9c 91       	ld	r25, X
    23f0:	13 97       	sbiw	r26, 0x03	; 3
    23f2:	91 83       	std	Z+1, r25	; 0x01
    23f4:	80 83       	st	Z, r24
	}
	TIMSK |= (1<<OCIE1A) ;
    23f6:	a9 e5       	ldi	r26, 0x59	; 89
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e9 e5       	ldi	r30, 0x59	; 89
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	80 61       	ori	r24, 0x10	; 16
    2402:	8c 93       	st	X, r24

}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <Timer1_deInit>:
/*
 * Description:
 * Function to disable the Timer1.
 */
void Timer1_deInit(void)
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    2416:	ef e4       	ldi	r30, 0x4F	; 79
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	10 82       	st	Z, r1
	TCCR1B = 0;
    241c:	ee e4       	ldi	r30, 0x4E	; 78
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	10 82       	st	Z, r1
	TCNT1 = 0;
    2422:	ec e4       	ldi	r30, 0x4C	; 76
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	11 82       	std	Z+1, r1	; 0x01
    2428:	10 82       	st	Z, r1
	OCR1A = 0;
    242a:	ea e4       	ldi	r30, 0x4A	; 74
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	11 82       	std	Z+1, r1	; 0x01
    2430:	10 82       	st	Z, r1
}
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <Timer1_setCallBack>:
/*
 * Description:
 *Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <Timer1_setCallBack+0x6>
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	90 93 fa 00 	sts	0x00FA, r25
    244e:	80 93 f9 00 	sts	0x00F9, r24

}
    2452:	0f 90       	pop	r0
    2454:	0f 90       	pop	r0
    2456:	cf 91       	pop	r28
    2458:	df 91       	pop	r29
    245a:	08 95       	ret

0000245c <UART_init>:
 * Function responsible for Init-ialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * UART_Config_Ptr){
    245c:	df 93       	push	r29
    245e:	cf 93       	push	r28
    2460:	00 d0       	rcall	.+0      	; 0x2462 <UART_init+0x6>
    2462:	00 d0       	rcall	.+0      	; 0x2464 <UART_init+0x8>
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	9c 83       	std	Y+4, r25	; 0x04
    246a:	8b 83       	std	Y+3, r24	; 0x03

	uint16 ubrr_value = 0;
    246c:	1a 82       	std	Y+2, r1	; 0x02
    246e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2470:	eb e2       	ldi	r30, 0x2B	; 43
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2478:	ea e2       	ldi	r30, 0x2A	; 42
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	88 e1       	ldi	r24, 0x18	; 24
    247e:	80 83       	st	Z, r24
	 * UPM1:0  = parity bit from user
	 * USBS    = num. of stop bits from user
	 * UCSZ1:0 = num. of data bits from user
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2480:	e0 e4       	ldi	r30, 0x40	; 64
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 e8       	ldi	r24, 0x80	; 128
    2486:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF)|((UART_Config_Ptr->parity)<< 4);
    2488:	a0 e4       	ldi	r26, 0x40	; 64
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e0 e4       	ldi	r30, 0x40	; 64
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	28 2f       	mov	r18, r24
    2494:	2f 7c       	andi	r18, 0xCF	; 207
    2496:	eb 81       	ldd	r30, Y+3	; 0x03
    2498:	fc 81       	ldd	r31, Y+4	; 0x04
    249a:	81 81       	ldd	r24, Z+1	; 0x01
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	82 95       	swap	r24
    24a2:	92 95       	swap	r25
    24a4:	90 7f       	andi	r25, 0xF0	; 240
    24a6:	98 27       	eor	r25, r24
    24a8:	80 7f       	andi	r24, 0xF0	; 240
    24aa:	98 27       	eor	r25, r24
    24ac:	82 2b       	or	r24, r18
    24ae:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7)|((UART_Config_Ptr->stop_bit)<< 3);
    24b0:	a0 e4       	ldi	r26, 0x40	; 64
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e0 e4       	ldi	r30, 0x40	; 64
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	27 7f       	andi	r18, 0xF7	; 247
    24be:	eb 81       	ldd	r30, Y+3	; 0x03
    24c0:	fc 81       	ldd	r31, Y+4	; 0x04
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	82 2b       	or	r24, r18
    24d6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9)|((UART_Config_Ptr->data_bits)<< 1);
    24d8:	a0 e4       	ldi	r26, 0x40	; 64
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e0 e4       	ldi	r30, 0x40	; 64
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	28 2f       	mov	r18, r24
    24e4:	29 7f       	andi	r18, 0xF9	; 249
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	80 81       	ld	r24, Z
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	82 2b       	or	r24, r18
    24f6:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config_Ptr->baud_rate) * 8UL))) - 1);
    24f8:	eb 81       	ldd	r30, Y+3	; 0x03
    24fa:	fc 81       	ldd	r31, Y+4	; 0x04
    24fc:	83 81       	ldd	r24, Z+3	; 0x03
    24fe:	94 81       	ldd	r25, Z+4	; 0x04
    2500:	a5 81       	ldd	r26, Z+5	; 0x05
    2502:	b6 81       	ldd	r27, Z+6	; 0x06
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	aa 1f       	adc	r26, r26
    250a:	bb 1f       	adc	r27, r27
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	aa 1f       	adc	r26, r26
    2512:	bb 1f       	adc	r27, r27
    2514:	88 0f       	add	r24, r24
    2516:	99 1f       	adc	r25, r25
    2518:	aa 1f       	adc	r26, r26
    251a:	bb 1f       	adc	r27, r27
    251c:	9c 01       	movw	r18, r24
    251e:	ad 01       	movw	r20, r26
    2520:	80 e4       	ldi	r24, 0x40	; 64
    2522:	92 e4       	ldi	r25, 0x42	; 66
    2524:	af e0       	ldi	r26, 0x0F	; 15
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 41 13 	call	0x2682	; 0x2682 <__udivmodsi4>
    2530:	da 01       	movw	r26, r20
    2532:	c9 01       	movw	r24, r18
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    253a:	e0 e4       	ldi	r30, 0x40	; 64
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	89 2f       	mov	r24, r25
    2544:	99 27       	eor	r25, r25
    2546:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2548:	e9 e2       	ldi	r30, 0x29	; 41
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	89 81       	ldd	r24, Y+1	; 0x01
    254e:	80 83       	st	Z, r24

}
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <UART_sendByte>:

/*
 * Description :
 * Function responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	0f 92       	push	r0
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * wait until UDRE flag is set which means Tx buffer (UDR) is empty
	 * and be ready for transimitting a new byte
	 * then write the data in Tx buffer (UDR) so UDRE is clear
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    256a:	eb e2       	ldi	r30, 0x2B	; 43
    256c:	f0 e0       	ldi	r31, 0x00	; 0
    256e:	80 81       	ld	r24, Z
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	80 72       	andi	r24, 0x20	; 32
    2576:	90 70       	andi	r25, 0x00	; 0
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	b9 f3       	breq	.-18     	; 0x256a <UART_sendByte+0xc>
	UDR = data;
    257c:	ec e2       	ldi	r30, 0x2C	; 44
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	80 83       	st	Z, r24
}
    2584:	0f 90       	pop	r0
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <UART_recieveByte>:

/*
 * Description :
 * Function responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
    258c:	df 93       	push	r29
    258e:	cf 93       	push	r28
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
	/*
	 * wait until RXC flag is set which means UART receive data and ready to read it
	 * then read the received data from Rx buffer (UDR) so UDRE is clear
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2594:	eb e2       	ldi	r30, 0x2B	; 43
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	88 23       	and	r24, r24
    259c:	dc f7       	brge	.-10     	; 0x2594 <UART_recieveByte+0x8>
	return UDR;
    259e:	ec e2       	ldi	r30, 0x2C	; 44
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z

}
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <UART_sendString>:

/*
 * Description :
 * Function responsible for send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <UART_sendString+0x6>
    25b0:	0f 92       	push	r0
    25b2:	cd b7       	in	r28, 0x3d	; 61
    25b4:	de b7       	in	r29, 0x3e	; 62
    25b6:	9b 83       	std	Y+3, r25	; 0x03
    25b8:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    25ba:	19 82       	std	Y+1, r1	; 0x01
    25bc:	0e c0       	rjmp	.+28     	; 0x25da <UART_sendString+0x30>
	/* send the whole string */
	while ( Str[i] != '\0'){
		UART_sendByte(Str[i]);
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	9b 81       	ldd	r25, Y+3	; 0x03
    25c8:	fc 01       	movw	r30, r24
    25ca:	e2 0f       	add	r30, r18
    25cc:	f3 1f       	adc	r31, r19
    25ce:	80 81       	ld	r24, Z
    25d0:	0e 94 af 12 	call	0x255e	; 0x255e <UART_sendByte>
		i++;
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	8f 5f       	subi	r24, 0xFF	; 255
    25d8:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str){

	uint8 i=0;
	/* send the whole string */
	while ( Str[i] != '\0'){
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	9b 81       	ldd	r25, Y+3	; 0x03
    25e4:	fc 01       	movw	r30, r24
    25e6:	e2 0f       	add	r30, r18
    25e8:	f3 1f       	adc	r31, r19
    25ea:	80 81       	ld	r24, Z
    25ec:	88 23       	and	r24, r24
    25ee:	39 f7       	brne	.-50     	; 0x25be <UART_sendString+0x14>
		UART_sendByte(Str[i]);
		i++;
	}
}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <UART_receiveString>:

/*
 * Description :
 * Function responsible for receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	00 d0       	rcall	.+0      	; 0x2606 <UART_receiveString+0xa>
    2606:	0f 92       	push	r0
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	9b 83       	std	Y+3, r25	; 0x03
    260e:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i=0;
    2610:	19 82       	std	Y+1, r1	; 0x01
	Str[i]= UART_recieveByte();  /* receive the first byte */
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	8a 81       	ldd	r24, Y+2	; 0x02
    261a:	9b 81       	ldd	r25, Y+3	; 0x03
    261c:	8c 01       	movw	r16, r24
    261e:	02 0f       	add	r16, r18
    2620:	13 1f       	adc	r17, r19
    2622:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_recieveByte>
    2626:	f8 01       	movw	r30, r16
    2628:	80 83       	st	Z, r24
    262a:	0f c0       	rjmp	.+30     	; 0x264a <UART_receiveString+0x4e>

	/* receive the whole string until the '#' */
	while ( Str[i] != '#'){
		i++;
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	8f 5f       	subi	r24, 0xFF	; 255
    2630:	89 83       	std	Y+1, r24	; 0x01
		Str[i]= UART_recieveByte();
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	9b 81       	ldd	r25, Y+3	; 0x03
    263c:	8c 01       	movw	r16, r24
    263e:	02 0f       	add	r16, r18
    2640:	13 1f       	adc	r17, r19
    2642:	0e 94 c6 12 	call	0x258c	; 0x258c <UART_recieveByte>
    2646:	f8 01       	movw	r30, r16
    2648:	80 83       	st	Z, r24

	uint8 i=0;
	Str[i]= UART_recieveByte();  /* receive the first byte */

	/* receive the whole string until the '#' */
	while ( Str[i] != '#'){
    264a:	89 81       	ldd	r24, Y+1	; 0x01
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	9b 81       	ldd	r25, Y+3	; 0x03
    2654:	fc 01       	movw	r30, r24
    2656:	e2 0f       	add	r30, r18
    2658:	f3 1f       	adc	r31, r19
    265a:	80 81       	ld	r24, Z
    265c:	83 32       	cpi	r24, 0x23	; 35
    265e:	31 f7       	brne	.-52     	; 0x262c <UART_receiveString+0x30>
		i++;
		Str[i]= UART_recieveByte();
	}

	/* after receiving the string and '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
    2668:	9b 81       	ldd	r25, Y+3	; 0x03
    266a:	fc 01       	movw	r30, r24
    266c:	e2 0f       	add	r30, r18
    266e:	f3 1f       	adc	r31, r19
    2670:	10 82       	st	Z, r1
}
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	08 95       	ret

00002682 <__udivmodsi4>:
    2682:	a1 e2       	ldi	r26, 0x21	; 33
    2684:	1a 2e       	mov	r1, r26
    2686:	aa 1b       	sub	r26, r26
    2688:	bb 1b       	sub	r27, r27
    268a:	fd 01       	movw	r30, r26
    268c:	0d c0       	rjmp	.+26     	; 0x26a8 <__udivmodsi4_ep>

0000268e <__udivmodsi4_loop>:
    268e:	aa 1f       	adc	r26, r26
    2690:	bb 1f       	adc	r27, r27
    2692:	ee 1f       	adc	r30, r30
    2694:	ff 1f       	adc	r31, r31
    2696:	a2 17       	cp	r26, r18
    2698:	b3 07       	cpc	r27, r19
    269a:	e4 07       	cpc	r30, r20
    269c:	f5 07       	cpc	r31, r21
    269e:	20 f0       	brcs	.+8      	; 0x26a8 <__udivmodsi4_ep>
    26a0:	a2 1b       	sub	r26, r18
    26a2:	b3 0b       	sbc	r27, r19
    26a4:	e4 0b       	sbc	r30, r20
    26a6:	f5 0b       	sbc	r31, r21

000026a8 <__udivmodsi4_ep>:
    26a8:	66 1f       	adc	r22, r22
    26aa:	77 1f       	adc	r23, r23
    26ac:	88 1f       	adc	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	1a 94       	dec	r1
    26b2:	69 f7       	brne	.-38     	; 0x268e <__udivmodsi4_loop>
    26b4:	60 95       	com	r22
    26b6:	70 95       	com	r23
    26b8:	80 95       	com	r24
    26ba:	90 95       	com	r25
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	bd 01       	movw	r22, r26
    26c2:	cf 01       	movw	r24, r30
    26c4:	08 95       	ret

000026c6 <__prologue_saves__>:
    26c6:	2f 92       	push	r2
    26c8:	3f 92       	push	r3
    26ca:	4f 92       	push	r4
    26cc:	5f 92       	push	r5
    26ce:	6f 92       	push	r6
    26d0:	7f 92       	push	r7
    26d2:	8f 92       	push	r8
    26d4:	9f 92       	push	r9
    26d6:	af 92       	push	r10
    26d8:	bf 92       	push	r11
    26da:	cf 92       	push	r12
    26dc:	df 92       	push	r13
    26de:	ef 92       	push	r14
    26e0:	ff 92       	push	r15
    26e2:	0f 93       	push	r16
    26e4:	1f 93       	push	r17
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	ca 1b       	sub	r28, r26
    26f0:	db 0b       	sbc	r29, r27
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	09 94       	ijmp

000026fe <__epilogue_restores__>:
    26fe:	2a 88       	ldd	r2, Y+18	; 0x12
    2700:	39 88       	ldd	r3, Y+17	; 0x11
    2702:	48 88       	ldd	r4, Y+16	; 0x10
    2704:	5f 84       	ldd	r5, Y+15	; 0x0f
    2706:	6e 84       	ldd	r6, Y+14	; 0x0e
    2708:	7d 84       	ldd	r7, Y+13	; 0x0d
    270a:	8c 84       	ldd	r8, Y+12	; 0x0c
    270c:	9b 84       	ldd	r9, Y+11	; 0x0b
    270e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2710:	b9 84       	ldd	r11, Y+9	; 0x09
    2712:	c8 84       	ldd	r12, Y+8	; 0x08
    2714:	df 80       	ldd	r13, Y+7	; 0x07
    2716:	ee 80       	ldd	r14, Y+6	; 0x06
    2718:	fd 80       	ldd	r15, Y+5	; 0x05
    271a:	0c 81       	ldd	r16, Y+4	; 0x04
    271c:	1b 81       	ldd	r17, Y+3	; 0x03
    271e:	aa 81       	ldd	r26, Y+2	; 0x02
    2720:	b9 81       	ldd	r27, Y+1	; 0x01
    2722:	ce 0f       	add	r28, r30
    2724:	d1 1d       	adc	r29, r1
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	ed 01       	movw	r28, r26
    2732:	08 95       	ret

00002734 <itoa>:
    2734:	fb 01       	movw	r30, r22
    2736:	9f 01       	movw	r18, r30
    2738:	e8 94       	clt
    273a:	42 30       	cpi	r20, 0x02	; 2
    273c:	c4 f0       	brlt	.+48     	; 0x276e <itoa+0x3a>
    273e:	45 32       	cpi	r20, 0x25	; 37
    2740:	b4 f4       	brge	.+44     	; 0x276e <itoa+0x3a>
    2742:	4a 30       	cpi	r20, 0x0A	; 10
    2744:	29 f4       	brne	.+10     	; 0x2750 <itoa+0x1c>
    2746:	97 fb       	bst	r25, 7
    2748:	1e f4       	brtc	.+6      	; 0x2750 <itoa+0x1c>
    274a:	90 95       	com	r25
    274c:	81 95       	neg	r24
    274e:	9f 4f       	sbci	r25, 0xFF	; 255
    2750:	64 2f       	mov	r22, r20
    2752:	77 27       	eor	r23, r23
    2754:	0e 94 cb 13 	call	0x2796	; 0x2796 <__udivmodhi4>
    2758:	80 5d       	subi	r24, 0xD0	; 208
    275a:	8a 33       	cpi	r24, 0x3A	; 58
    275c:	0c f0       	brlt	.+2      	; 0x2760 <itoa+0x2c>
    275e:	89 5d       	subi	r24, 0xD9	; 217
    2760:	81 93       	st	Z+, r24
    2762:	cb 01       	movw	r24, r22
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	a1 f7       	brne	.-24     	; 0x2750 <itoa+0x1c>
    2768:	16 f4       	brtc	.+4      	; 0x276e <itoa+0x3a>
    276a:	5d e2       	ldi	r21, 0x2D	; 45
    276c:	51 93       	st	Z+, r21
    276e:	10 82       	st	Z, r1
    2770:	c9 01       	movw	r24, r18
    2772:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <strrev>

00002776 <strrev>:
    2776:	dc 01       	movw	r26, r24
    2778:	fc 01       	movw	r30, r24
    277a:	67 2f       	mov	r22, r23
    277c:	71 91       	ld	r23, Z+
    277e:	77 23       	and	r23, r23
    2780:	e1 f7       	brne	.-8      	; 0x277a <strrev+0x4>
    2782:	32 97       	sbiw	r30, 0x02	; 2
    2784:	04 c0       	rjmp	.+8      	; 0x278e <strrev+0x18>
    2786:	7c 91       	ld	r23, X
    2788:	6d 93       	st	X+, r22
    278a:	70 83       	st	Z, r23
    278c:	62 91       	ld	r22, -Z
    278e:	ae 17       	cp	r26, r30
    2790:	bf 07       	cpc	r27, r31
    2792:	c8 f3       	brcs	.-14     	; 0x2786 <strrev+0x10>
    2794:	08 95       	ret

00002796 <__udivmodhi4>:
    2796:	aa 1b       	sub	r26, r26
    2798:	bb 1b       	sub	r27, r27
    279a:	51 e1       	ldi	r21, 0x11	; 17
    279c:	07 c0       	rjmp	.+14     	; 0x27ac <__udivmodhi4_ep>

0000279e <__udivmodhi4_loop>:
    279e:	aa 1f       	adc	r26, r26
    27a0:	bb 1f       	adc	r27, r27
    27a2:	a6 17       	cp	r26, r22
    27a4:	b7 07       	cpc	r27, r23
    27a6:	10 f0       	brcs	.+4      	; 0x27ac <__udivmodhi4_ep>
    27a8:	a6 1b       	sub	r26, r22
    27aa:	b7 0b       	sbc	r27, r23

000027ac <__udivmodhi4_ep>:
    27ac:	88 1f       	adc	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	5a 95       	dec	r21
    27b2:	a9 f7       	brne	.-22     	; 0x279e <__udivmodhi4_loop>
    27b4:	80 95       	com	r24
    27b6:	90 95       	com	r25
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	08 95       	ret

000027be <_exit>:
    27be:	f8 94       	cli

000027c0 <__stop_program>:
    27c0:	ff cf       	rjmp	.-2      	; 0x27c0 <__stop_program>
